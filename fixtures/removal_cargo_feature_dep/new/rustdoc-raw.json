{
  "crate_version": "1.0.0",
  "external_crates": {
    "1": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "std"
    },
    "10": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "rustc_std_workspace_alloc"
    },
    "11": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "rustc_demangle"
    },
    "12": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "std_detect"
    },
    "13": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "addr2line"
    },
    "14": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "gimli"
    },
    "15": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "object"
    },
    "16": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "memchr"
    },
    "17": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "miniz_oxide"
    },
    "18": {
      "html_root_url": "https://docs.rs/adler/0.2.3/",
      "name": "adler"
    },
    "19": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "panic_unwind"
    },
    "2": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "core"
    },
    "3": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "compiler_builtins"
    },
    "4": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "rustc_std_workspace_core"
    },
    "5": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "alloc"
    },
    "6": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "libc"
    },
    "7": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "unwind"
    },
    "8": {
      "html_root_url": "https://docs.rs/cfg-if/",
      "name": "cfg_if"
    },
    "9": {
      "html_root_url": "https://doc.rust-lang.org/nightly/",
      "name": "hashbrown"
    }
  },
  "format_version": 9,
  "includes_private": false,
  "index": {
    "0:0": {
      "attrs": [],
      "crate_id": 0,
      "deprecation": null,
      "docs": null,
      "id": "0:0",
      "inner": {
        "is_crate": true,
        "items": []
      },
      "kind": "module",
      "links": {},
      "name": "removal_cargo_feature_dep_new",
      "span": {
        "begin": [
          0,
          0
        ],
        "end": [
          0,
          0
        ],
        "filename": "removal_cargo_feature_dep/new/src/lib.rs"
      },
      "visibility": "public"
    },
    "1:2337": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:2337",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:9576",
                  "name": "Debug",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          },
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:9583",
                  "name": "Display",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:2338",
          "1:2339",
          "1:2340",
          "1:2341",
          "1:2342"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Error",
      "span": null,
      "visibility": "public"
    },
    "1:4395": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:4395",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:4396",
          "1:4397",
          "1:4399",
          "1:4400",
          "1:4401",
          "1:4402",
          "1:4403",
          "1:4405",
          "1:4406",
          "1:4407",
          "1:4408",
          "1:4410"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Read",
      "span": null,
      "visibility": "public"
    },
    "1:4452": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:4452",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:4453",
          "1:4454",
          "1:4456",
          "1:4457",
          "1:4458",
          "1:4459",
          "1:4460",
          "1:4469"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Write",
      "span": null,
      "visibility": "public"
    },
    "1:4470": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:4470",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:4471",
          "1:4472",
          "1:4473",
          "1:4474"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Seek",
      "span": null,
      "visibility": "public"
    },
    "1:4477": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:4477",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "1:4395",
                  "name": "Read",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:4478",
          "1:4479",
          "1:4480",
          "1:4482",
          "1:4483",
          "1:4485",
          "1:4486"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "BufRead",
      "span": null,
      "visibility": "public"
    },
    "1:4758": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:4758",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:4759",
          "1:4760"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "ToSocketAddrs",
      "span": null,
      "visibility": "public"
    },
    "1:5428": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5428",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "1:10221",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5429",
          "1:5430"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "OsStringExt",
      "span": null,
      "visibility": "public"
    },
    "1:5434": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5434",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "1:10221",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5435",
          "1:5436"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "OsStrExt",
      "span": null,
      "visibility": "public"
    },
    "1:5500": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5500",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5501",
          "1:5502",
          "1:5503",
          "1:5504"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "FileExt",
      "span": null,
      "visibility": "public"
    },
    "1:5508": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5508",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5509",
          "1:5510",
          "1:5511"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "PermissionsExt",
      "span": null,
      "visibility": "public"
    },
    "1:5516": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5516",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5517",
          "1:5518"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "OpenOptionsExt",
      "span": null,
      "visibility": "public"
    },
    "1:5522": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5522",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5523",
          "1:5524",
          "1:5525",
          "1:5526",
          "1:5527",
          "1:5528",
          "1:5529",
          "1:5530",
          "1:5531",
          "1:5532",
          "1:5533",
          "1:5534",
          "1:5535",
          "1:5536",
          "1:5537",
          "1:5538"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "MetadataExt",
      "span": null,
      "visibility": "public"
    },
    "1:5556": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5556",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5557",
          "1:5558",
          "1:5559",
          "1:5560"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "FileTypeExt",
      "span": null,
      "visibility": "public"
    },
    "1:5566": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5566",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5567"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "DirEntryExt",
      "span": null,
      "visibility": "public"
    },
    "1:5570": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5570",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "1:10221",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5571"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "DirEntryExt2",
      "span": null,
      "visibility": "public"
    },
    "1:5578": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:5578",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:5579"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "DirBuilderExt",
      "span": null,
      "visibility": "public"
    },
    "1:6216": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6216",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "1:10221",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6217",
          "1:6218",
          "1:6219",
          "1:6220",
          "1:6222",
          "1:6224",
          "1:6225"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "CommandExt",
      "span": null,
      "visibility": "public"
    },
    "1:6236": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6236",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "1:10221",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6237",
          "1:6238",
          "1:6239",
          "1:6240",
          "1:6241",
          "1:6242"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "ExitStatusExt",
      "span": null,
      "visibility": "public"
    },
    "1:6334": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6334",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6335",
          "1:6336"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "JoinHandleExt",
      "span": null,
      "visibility": "public"
    },
    "1:6462": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6462",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6463",
          "1:6464",
          "1:6465",
          "1:6466",
          "1:6467",
          "1:6468",
          "1:6469",
          "1:6470",
          "1:6471",
          "1:6472",
          "1:6473",
          "1:6474",
          "1:6475",
          "1:6476",
          "1:6477",
          "1:6478",
          "1:6479"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "MetadataExt",
      "span": null,
      "visibility": "public"
    },
    "1:6564": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6564",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "1:10221",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6565",
          "1:6566"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "ChildExt",
      "span": null,
      "visibility": "public"
    },
    "1:6567": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6567",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "1:10221",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6568"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "CommandExt",
      "span": null,
      "visibility": "public"
    },
    "1:6636": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6636",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6637"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "AsRawFd",
      "span": null,
      "visibility": "public"
    },
    "1:6638": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6638",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6639"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "FromRawFd",
      "span": null,
      "visibility": "public"
    },
    "1:6640": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6640",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6641"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "IntoRawFd",
      "span": null,
      "visibility": "public"
    },
    "1:6723": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:6723",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:6724"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "AsFd",
      "span": null,
      "visibility": "public"
    },
    "1:7508": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:7508",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:7509"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Termination",
      "span": null,
      "visibility": "public"
    },
    "1:857": {
      "attrs": [],
      "crate_id": 1,
      "deprecation": null,
      "docs": null,
      "id": "1:857",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "1:858",
          "1:859",
          "1:860",
          "1:861",
          "1:862",
          "1:863",
          "1:864"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "AsciiExt",
      "span": null,
      "visibility": "public"
    },
    "2:10165": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:10165",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:10156",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "T",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": [
          "2:10167",
          "2:10168",
          "2:10169",
          "2:10170",
          "2:10171",
          "2:10172",
          "2:10173"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "SliceIndex",
      "span": null,
      "visibility": "public"
    },
    "2:11689": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:11689",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:11690",
          "2:11691"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "SlicePattern",
      "span": null,
      "visibility": "public"
    },
    "2:12167": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:12167",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:12168",
          "2:12169"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "FromStr",
      "span": null,
      "visibility": "public"
    },
    "2:12239": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:12239",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:12241",
          "2:12242",
          "2:12243",
          "2:12244",
          "2:12245",
          "2:12246",
          "2:12247"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Pattern",
      "span": null,
      "visibility": "public"
    },
    "2:12248": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:12248",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": [
          "2:12250",
          "2:12251",
          "2:12252",
          "2:12253"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Searcher",
      "span": null,
      "visibility": "public"
    },
    "2:12254": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:12254",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "lifetime": "'a"
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:12248",
                  "name": "Searcher",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": [
          "2:12256",
          "2:12257",
          "2:12258"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "ReverseSearcher",
      "span": null,
      "visibility": "public"
    },
    "2:12259": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:12259",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "lifetime": "'a"
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:12254",
                  "name": "ReverseSearcher",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "DoubleEndedSearcher",
      "span": null,
      "visibility": "public"
    },
    "2:12593": {
      "attrs": [
        "#[lang = \"str\"]",
        "#[cfg(not(test))]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:12593",
      "inner": {
        "blanket_impl": null,
        "for": {
          "inner": "str",
          "kind": "primitive"
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "is_unsafe": false,
        "items": [
          "2:12594",
          "2:12595",
          "2:12596",
          "2:12597",
          "2:12598",
          "2:12599",
          "2:12600",
          "2:12601",
          "2:12603",
          "2:12605",
          "2:12607",
          "2:12609",
          "2:12610",
          "2:12611",
          "2:12612",
          "2:12613",
          "2:12614",
          "2:12615",
          "2:12616",
          "2:12617",
          "2:12618",
          "2:12619",
          "2:12620",
          "2:12621",
          "2:12624",
          "2:12627",
          "2:12630",
          "2:12634",
          "2:12638",
          "2:12641",
          "2:12644",
          "2:12647",
          "2:12650",
          "2:12653",
          "2:12656",
          "2:12659",
          "2:12662",
          "2:12665",
          "2:12668",
          "2:12671",
          "2:12674",
          "2:12677",
          "2:12679",
          "2:12681",
          "2:12683",
          "2:12684",
          "2:12685",
          "2:12688",
          "2:12691",
          "2:12694",
          "2:12697",
          "2:12700",
          "2:12703",
          "2:12706",
          "2:12708",
          "2:12709",
          "2:12710",
          "2:12711",
          "2:12712",
          "2:12714",
          "2:12715"
        ],
        "negative": false,
        "provided_trait_methods": [],
        "synthetic": false,
        "trait": null
      },
      "kind": "impl",
      "links": {},
      "name": null,
      "span": null,
      "visibility": {
        "restricted": {
          "parent": "2:11702",
          "path": "::str"
        }
      }
    },
    "2:12594": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_const_stable(feature = \"const_str_len\", since = \"1.39.0\")]",
        "#[must_use]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns the length of `self`.\n\nThis length is in bytes, not [`char`]s or graphemes. In other words,\nit might not be what a human considers the length of the string.\n\n[`char`]: prim@char\n\n# Examples\n\nBasic usage:\n\n```\nlet len = \"foo\".len();\nassert_eq!(3, len);\n\nassert_eq!(\"ƒoo\".len(), 4); // fancy f!\nassert_eq!(\"ƒoo\".chars().count(), 3);\n```",
      "id": "2:12594",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": "usize",
            "kind": "primitive"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": [
          "const"
        ]
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321"
      },
      "name": "len",
      "span": null,
      "visibility": "public"
    },
    "2:12595": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.39.0\")]",
        "#[must_use]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns `true` if `self` has a length of zero bytes.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"\";\nassert!(s.is_empty());\n\nlet s = \"not empty\";\nassert!(!s.is_empty());\n```",
      "id": "2:12595",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": "bool",
            "kind": "primitive"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": [
          "const"
        ]
      },
      "kind": "method",
      "links": {},
      "name": "is_empty",
      "span": null,
      "visibility": "public"
    },
    "2:12596": {
      "attrs": [
        "#[must_use]",
        "#[stable(feature = \"is_char_boundary\", since = \"1.9.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Checks that `index`-th byte is the first byte in a UTF-8 code point\nsequence or the end of the string.\n\nThe start and end of the string (when `index == self.len()`) are\nconsidered to be boundaries.\n\nReturns `false` if `index` is greater than `self.len()`.\n\n# Examples\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nassert!(s.is_char_boundary(0));\n// start of `老`\nassert!(s.is_char_boundary(6));\nassert!(s.is_char_boundary(s.len()));\n\n// second byte of `ö`\nassert!(!s.is_char_boundary(2));\n\n// third byte of `老`\nassert!(!s.is_char_boundary(8));\n```",
      "id": "2:12596",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "index",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ]
          ],
          "output": {
            "inner": "bool",
            "kind": "primitive"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "is_char_boundary",
      "span": null,
      "visibility": "public"
    },
    "2:12597": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.39.0\")]",
        "#[must_use]",
        "#[inline(always)]",
        "#[allow(unused_attributes)]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Converts a string slice to a byte slice. To convert the byte slice back\ninto a string slice, use the [`from_utf8`] function.\n\n# Examples\n\nBasic usage:\n\n```\nlet bytes = \"bors\".as_bytes();\nassert_eq!(b\"bors\", bytes);\n```",
      "id": "2:12597",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": false,
              "type": {
                "inner": {
                  "inner": "u8",
                  "kind": "primitive"
                },
                "kind": "slice"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": [
          "const"
        ]
      },
      "kind": "method",
      "links": {
        "`from_utf8`": "2:11713"
      },
      "name": "as_bytes",
      "span": null,
      "visibility": "public"
    },
    "2:12598": {
      "attrs": [
        "#[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]",
        "#[must_use]",
        "#[inline(always)]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Converts a mutable string slice to a mutable byte slice.\n\n# Safety\n\nThe caller must ensure that the content of the slice is valid UTF-8\nbefore the borrow ends and the underlying `str` is used.\n\nUse of a `str` whose contents are not valid UTF-8 is undefined behavior.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = String::from(\"Hello\");\nlet bytes = unsafe { s.as_bytes_mut() };\n\nassert_eq!(b\"Hello\", bytes);\n```\n\nMutability:\n\n```\nlet mut s = String::from(\"🗻∈🌏\");\n\nunsafe {\n    let bytes = s.as_bytes_mut();\n\n    bytes[0] = 0xF0;\n    bytes[1] = 0x9F;\n    bytes[2] = 0x8D;\n    bytes[3] = 0x94;\n}\n\nassert_eq!(\"🍔∈🌏\", s);\n```",
      "id": "2:12598",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": true,
              "type": {
                "inner": {
                  "inner": "u8",
                  "kind": "primitive"
                },
                "kind": "slice"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": [
          "unsafe"
        ]
      },
      "kind": "method",
      "links": {},
      "name": "as_bytes_mut",
      "span": null,
      "visibility": "public"
    },
    "2:12599": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\")]",
        "#[must_use]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Converts a string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nThe caller must ensure that the returned pointer is never written to.\nIf you need to mutate the contents of the string slice, use [`as_mut_ptr`].\n\n[`as_mut_ptr`]: str::as_mut_ptr\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Hello\";\nlet ptr = s.as_ptr();\n```",
      "id": "2:12599",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "mutable": false,
              "type": {
                "inner": "u8",
                "kind": "primitive"
              }
            },
            "kind": "raw_pointer"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": [
          "const"
        ]
      },
      "kind": "method",
      "links": {
        "`u8`": "1:15335",
        "str::as_mut_ptr": "1:15326"
      },
      "name": "as_ptr",
      "span": null,
      "visibility": "public"
    },
    "2:12600": {
      "attrs": [
        "#[stable(feature = \"str_as_mut_ptr\", since = \"1.36.0\")]",
        "#[must_use]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Converts a mutable string slice to a raw pointer.\n\nAs string slices are a slice of bytes, the raw pointer points to a\n[`u8`]. This pointer will be pointing to the first byte of the string\nslice.\n\nIt is your responsibility to make sure that the string slice only gets\nmodified in a way that it remains valid UTF-8.",
      "id": "2:12600",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "mutable": true,
              "type": {
                "inner": "u8",
                "kind": "primitive"
              }
            },
            "kind": "raw_pointer"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`u8`": "1:15335"
      },
      "name": "as_mut_ptr",
      "span": null,
      "visibility": "public"
    },
    "2:12601": {
      "attrs": [
        "#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet v = String::from(\"🗻∈🌏\");\n\nassert_eq!(Some(\"🗻\"), v.get(0..4));\n\n// indices not on UTF-8 sequence boundaries\nassert!(v.get(1..).is_none());\nassert!(v.get(..8).is_none());\n\n// out of bounds\nassert!(v.get(..42).is_none());\n```",
      "id": "2:12601",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "i",
              {
                "inner": "I",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": {
                          "lifetime": null,
                          "mutable": false,
                          "type": {
                            "inner": {
                              "name": "Output",
                              "self_type": {
                                "inner": "I",
                                "kind": "generic"
                              },
                              "trait": {
                                "inner": {
                                  "args": {
                                    "angle_bracketed": {
                                      "args": [
                                        {
                                          "type": {
                                            "inner": "str",
                                            "kind": "primitive"
                                          }
                                        }
                                      ],
                                      "bindings": []
                                    }
                                  },
                                  "id": "2:10165",
                                  "name": "SliceIndex",
                                  "param_names": []
                                },
                                "kind": "resolved_path"
                              }
                            },
                            "kind": "qualified_path"
                          }
                        },
                        "kind": "borrowed_ref"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:45100",
              "name": "Option",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "I"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "type": {
                                    "inner": "str",
                                    "kind": "primitive"
                                  }
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:10165",
                          "name": "SliceIndex",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "I",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`None`": "2:45100"
      },
      "name": "get",
      "span": null,
      "visibility": "public"
    },
    "2:12603": {
      "attrs": [
        "#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a mutable subslice of `str`.\n\nThis is the non-panicking alternative to indexing the `str`. Returns\n[`None`] whenever equivalent indexing operation would panic.\n\n# Examples\n\n```\nlet mut v = String::from(\"hello\");\n// correct length\nassert!(v.get_mut(0..5).is_some());\n// out of bounds\nassert!(v.get_mut(..42).is_none());\nassert_eq!(Some(\"he\"), v.get_mut(0..2).map(|v| &*v));\n\nassert_eq!(\"hello\", v);\n{\n    let s = v.get_mut(0..2);\n    let s = s.map(|s| {\n        s.make_ascii_uppercase();\n        &*s\n    });\n    assert_eq!(Some(\"HE\"), s);\n}\nassert_eq!(\"HEllo\", v);\n```",
      "id": "2:12603",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "i",
              {
                "inner": "I",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": {
                          "lifetime": null,
                          "mutable": true,
                          "type": {
                            "inner": {
                              "name": "Output",
                              "self_type": {
                                "inner": "I",
                                "kind": "generic"
                              },
                              "trait": {
                                "inner": {
                                  "args": {
                                    "angle_bracketed": {
                                      "args": [
                                        {
                                          "type": {
                                            "inner": "str",
                                            "kind": "primitive"
                                          }
                                        }
                                      ],
                                      "bindings": []
                                    }
                                  },
                                  "id": "2:10165",
                                  "name": "SliceIndex",
                                  "param_names": []
                                },
                                "kind": "resolved_path"
                              }
                            },
                            "kind": "qualified_path"
                          }
                        },
                        "kind": "borrowed_ref"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:45100",
              "name": "Option",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "I"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "type": {
                                    "inner": "str",
                                    "kind": "primitive"
                                  }
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:10165",
                          "name": "SliceIndex",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "I",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`None`": "2:45100"
      },
      "name": "get_mut",
      "span": null,
      "visibility": "public"
    },
    "2:12605": {
      "attrs": [
        "#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns an unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet v = \"🗻∈🌏\";\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked(0..4));\n    assert_eq!(\"∈\", v.get_unchecked(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked(7..11));\n}\n```",
      "id": "2:12605",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "i",
              {
                "inner": "I",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": false,
              "type": {
                "inner": {
                  "name": "Output",
                  "self_type": {
                    "inner": "I",
                    "kind": "generic"
                  },
                  "trait": {
                    "inner": {
                      "args": {
                        "angle_bracketed": {
                          "args": [
                            {
                              "type": {
                                "inner": "str",
                                "kind": "primitive"
                              }
                            }
                          ],
                          "bindings": []
                        }
                      },
                      "id": "2:10165",
                      "name": "SliceIndex",
                      "param_names": []
                    },
                    "kind": "resolved_path"
                  }
                },
                "kind": "qualified_path"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "I"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "type": {
                                    "inner": "str",
                                    "kind": "primitive"
                                  }
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:10165",
                          "name": "SliceIndex",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "I",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": [
          "unsafe"
        ]
      },
      "kind": "method",
      "links": {},
      "name": "get_unchecked",
      "span": null,
      "visibility": "public"
    },
    "2:12607": {
      "attrs": [
        "#[stable(feature = \"str_checked_slicing\", since = \"1.20.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a mutable, unchecked subslice of `str`.\n\nThis is the unchecked alternative to indexing the `str`.\n\n# Safety\n\nCallers of this function are responsible that these preconditions are\nsatisfied:\n\n* The starting index must not exceed the ending index;\n* Indexes must be within bounds of the original slice;\n* Indexes must lie on UTF-8 sequence boundaries.\n\nFailing that, the returned string slice may reference invalid memory or\nviolate the invariants communicated by the `str` type.\n\n# Examples\n\n```\nlet mut v = String::from(\"🗻∈🌏\");\nunsafe {\n    assert_eq!(\"🗻\", v.get_unchecked_mut(0..4));\n    assert_eq!(\"∈\", v.get_unchecked_mut(4..7));\n    assert_eq!(\"🌏\", v.get_unchecked_mut(7..11));\n}\n```",
      "id": "2:12607",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "i",
              {
                "inner": "I",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": true,
              "type": {
                "inner": {
                  "name": "Output",
                  "self_type": {
                    "inner": "I",
                    "kind": "generic"
                  },
                  "trait": {
                    "inner": {
                      "args": {
                        "angle_bracketed": {
                          "args": [
                            {
                              "type": {
                                "inner": "str",
                                "kind": "primitive"
                              }
                            }
                          ],
                          "bindings": []
                        }
                      },
                      "id": "2:10165",
                      "name": "SliceIndex",
                      "param_names": []
                    },
                    "kind": "resolved_path"
                  }
                },
                "kind": "qualified_path"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "I"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "type": {
                                    "inner": "str",
                                    "kind": "primitive"
                                  }
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:10165",
                          "name": "SliceIndex",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "I",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": [
          "unsafe"
        ]
      },
      "kind": "method",
      "links": {},
      "name": "get_unchecked_mut",
      "span": null,
      "visibility": "public"
    },
    "2:12609": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked(begin..end)` instead\")]",
        "#[must_use]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": {
        "note": "use `get_unchecked(begin..end)` instead",
        "since": "1.29.0"
      },
      "docs": "Creates a string slice from another string slice, bypassing safety\nchecks.\n\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`Index`].\n\n[`Index`]: crate::ops::Index\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get a mutable string slice instead, see the\n[`slice_mut_unchecked`] method.\n\n[`slice_mut_unchecked`]: str::slice_mut_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nunsafe {\n    assert_eq!(\"Löwe 老虎 Léopard\", s.slice_unchecked(0, 21));\n}\n\nlet s = \"Hello, world!\";\n\nunsafe {\n    assert_eq!(\"world\", s.slice_unchecked(7, 12));\n}\n```",
      "id": "2:12609",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "begin",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ],
            [
              "end",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": [
          "unsafe"
        ]
      },
      "kind": "method",
      "links": {
        "`str`": "1:15326",
        "crate::ops::Index": "2:3318",
        "str::slice_mut_unchecked": "1:15326"
      },
      "name": "slice_unchecked",
      "span": null,
      "visibility": "public"
    },
    "2:12610": {
      "attrs": [
        "#[stable(feature = \"str_slice_mut\", since = \"1.5.0\")]",
        "#[rustc_deprecated(since = \"1.29.0\", reason =\n                   \"use `get_unchecked_mut(begin..end)` instead\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": {
        "note": "use `get_unchecked_mut(begin..end)` instead",
        "since": "1.29.0"
      },
      "docs": "Creates a string slice from another string slice, bypassing safety\nchecks.\nThis is generally not recommended, use with caution! For a safe\nalternative see [`str`] and [`IndexMut`].\n\n[`IndexMut`]: crate::ops::IndexMut\n\nThis new slice goes from `begin` to `end`, including `begin` but\nexcluding `end`.\n\nTo get an immutable string slice instead, see the\n[`slice_unchecked`] method.\n\n[`slice_unchecked`]: str::slice_unchecked\n\n# Safety\n\nCallers of this function are responsible that three preconditions are\nsatisfied:\n\n* `begin` must not exceed `end`.\n* `begin` and `end` must be byte positions within the string slice.\n* `begin` and `end` must lie on UTF-8 sequence boundaries.",
      "id": "2:12610",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "begin",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ],
            [
              "end",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": true,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": [
          "unsafe"
        ]
      },
      "kind": "method",
      "links": {
        "`str`": "1:15326",
        "crate::ops::IndexMut": "2:3322",
        "str::slice_unchecked": "1:15326"
      },
      "name": "slice_mut_unchecked",
      "span": null,
      "visibility": "public"
    },
    "2:12611": {
      "attrs": [
        "#[inline]",
        "#[must_use]",
        "#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Divide one string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get mutable string slices instead, see the [`split_at_mut`]\nmethod.\n\n[`split_at_mut`]: str::split_at_mut\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"Per Martin-Löf\";\n\nlet (first, last) = s.split_at(3);\n\nassert_eq!(\"Per\", first);\nassert_eq!(\" Martin-Löf\", last);\n```",
      "id": "2:12611",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "mid",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ]
          ],
          "output": {
            "inner": [
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "str",
                    "kind": "primitive"
                  }
                },
                "kind": "borrowed_ref"
              },
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "str",
                    "kind": "primitive"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            "kind": "tuple"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "str::split_at_mut": "1:15326"
      },
      "name": "split_at",
      "span": null,
      "visibility": "public"
    },
    "2:12612": {
      "attrs": [
        "#[inline]",
        "#[must_use]",
        "#[stable(feature = \"str_split_at\", since = \"1.4.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Divide one mutable string slice into two at an index.\n\nThe argument, `mid`, should be a byte offset from the start of the\nstring. It must also be on the boundary of a UTF-8 code point.\n\nThe two slices returned go from the start of the string slice to `mid`,\nand from `mid` to the end of the string slice.\n\nTo get immutable string slices instead, see the [`split_at`] method.\n\n[`split_at`]: str::split_at\n\n# Panics\n\nPanics if `mid` is not on a UTF-8 code point boundary, or if it is\npast the end of the last code point of the string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut s = \"Per Martin-Löf\".to_string();\n{\n    let (first, last) = s.split_at_mut(3);\n    first.make_ascii_uppercase();\n    assert_eq!(\"PER\", first);\n    assert_eq!(\" Martin-Löf\", last);\n}\nassert_eq!(\"PER Martin-Löf\", s);\n```",
      "id": "2:12612",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "mid",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ]
          ],
          "output": {
            "inner": [
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "str",
                    "kind": "primitive"
                  }
                },
                "kind": "borrowed_ref"
              },
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "str",
                    "kind": "primitive"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            "kind": "tuple"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "str::split_at": "1:15326"
      },
      "name": "split_at_mut",
      "span": null,
      "visibility": "public"
    },
    "2:12613": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns an iterator over the [`char`]s of a string slice.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns such an iterator.\n\nIt's important to remember that [`char`] represents a Unicode Scalar\nValue, and might not match your idea of what a 'character' is. Iteration\nover grapheme clusters may be what you actually want. This functionality\nis not provided by Rust's standard library, check crates.io instead.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.chars().count();\nassert_eq!(7, count);\n\nlet mut chars = word.chars();\n\nassert_eq!(Some('g'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('o'), chars.next());\nassert_eq!(Some('d'), chars.next());\nassert_eq!(Some('b'), chars.next());\nassert_eq!(Some('y'), chars.next());\nassert_eq!(Some('e'), chars.next());\n\nassert_eq!(None, chars.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet y = \"y̆\";\n\nlet mut chars = y.chars();\n\nassert_eq!(Some('y'), chars.next()); // not 'y̆'\nassert_eq!(Some('\\u{0306}'), chars.next());\n\nassert_eq!(None, chars.next());\n```",
      "id": "2:12613",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:46920",
              "name": "Chars",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321"
      },
      "name": "chars",
      "span": null,
      "visibility": "public"
    },
    "2:12614": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns an iterator over the [`char`]s of a string slice, and their\npositions.\n\nAs a string slice consists of valid UTF-8, we can iterate through a\nstring slice by [`char`]. This method returns an iterator of both\nthese [`char`]s, as well as their byte positions.\n\nThe iterator yields tuples. The position is first, the [`char`] is\nsecond.\n\n# Examples\n\nBasic usage:\n\n```\nlet word = \"goodbye\";\n\nlet count = word.char_indices().count();\nassert_eq!(7, count);\n\nlet mut char_indices = word.char_indices();\n\nassert_eq!(Some((0, 'g')), char_indices.next());\nassert_eq!(Some((1, 'o')), char_indices.next());\nassert_eq!(Some((2, 'o')), char_indices.next());\nassert_eq!(Some((3, 'd')), char_indices.next());\nassert_eq!(Some((4, 'b')), char_indices.next());\nassert_eq!(Some((5, 'y')), char_indices.next());\nassert_eq!(Some((6, 'e')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```\n\nRemember, [`char`]s might not match your intuition about characters:\n\n[`char`]: prim@char\n\n```\nlet yes = \"y̆es\";\n\nlet mut char_indices = yes.char_indices();\n\nassert_eq!(Some((0, 'y')), char_indices.next()); // not (0, 'y̆')\nassert_eq!(Some((1, '\\u{0306}')), char_indices.next());\n\n// note the 3 here - the last character took up two bytes\nassert_eq!(Some((3, 'e')), char_indices.next());\nassert_eq!(Some((4, 's')), char_indices.next());\n\nassert_eq!(None, char_indices.next());\n```",
      "id": "2:12614",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:46926",
              "name": "CharIndices",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321"
      },
      "name": "char_indices",
      "span": null,
      "visibility": "public"
    },
    "2:12615": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over the bytes of a string slice.\n\nAs a string slice consists of a sequence of bytes, we can iterate\nthrough a string slice by byte. This method returns such an iterator.\n\n# Examples\n\nBasic usage:\n\n```\nlet mut bytes = \"bors\".bytes();\n\nassert_eq!(Some(b'b'), bytes.next());\nassert_eq!(Some(b'o'), bytes.next());\nassert_eq!(Some(b'r'), bytes.next());\nassert_eq!(Some(b's'), bytes.next());\n\nassert_eq!(None, bytes.next());\n```",
      "id": "2:12615",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:46936",
              "name": "Bytes",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "bytes",
      "span": null,
      "visibility": "public"
    },
    "2:12616": {
      "attrs": [
        "#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"split_whitespace\", since = \"1.1.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Splits a string slice by whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of whitespace.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`. If you only want to split on ASCII whitespace\ninstead, use [`split_ascii_whitespace`].\n\n[`split_ascii_whitespace`]: str::split_ascii_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta\\u{2009}little  \\n\\t lamb\".split_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```",
      "id": "2:12616",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47224",
              "name": "SplitWhitespace",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "str::split_ascii_whitespace": "1:15326"
      },
      "name": "split_whitespace",
      "span": null,
      "visibility": "public"
    },
    "2:12617": {
      "attrs": [
        "#[must_use =\n  \"this returns the split string as an iterator, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Splits a string slice by ASCII whitespace.\n\nThe iterator returned will return string slices that are sub-slices of\nthe original string slice, separated by any amount of ASCII whitespace.\n\nTo split by Unicode `Whitespace` instead, use [`split_whitespace`].\n\n[`split_whitespace`]: str::split_whitespace\n\n# Examples\n\nBasic usage:\n\n```\nlet mut iter = \"A few words\".split_ascii_whitespace();\n\nassert_eq!(Some(\"A\"), iter.next());\nassert_eq!(Some(\"few\"), iter.next());\nassert_eq!(Some(\"words\"), iter.next());\n\nassert_eq!(None, iter.next());\n```\n\nAll kinds of ASCII whitespace are considered:\n\n```\nlet mut iter = \" Mary   had\\ta little  \\n\\t lamb\".split_ascii_whitespace();\nassert_eq!(Some(\"Mary\"), iter.next());\nassert_eq!(Some(\"had\"), iter.next());\nassert_eq!(Some(\"a\"), iter.next());\nassert_eq!(Some(\"little\"), iter.next());\nassert_eq!(Some(\"lamb\"), iter.next());\n\nassert_eq!(None, iter.next());\n```",
      "id": "2:12617",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47233",
              "name": "SplitAsciiWhitespace",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "str::split_whitespace": "1:15326"
      },
      "name": "split_ascii_whitespace",
      "span": null,
      "visibility": "public"
    },
    "2:12618": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over the lines of a string, as string slices.\n\nLines are ended with either a newline (`\\n`) or a carriage return with\na line feed (`\\r\\n`).\n\nThe final line ending is optional. A string that ends with a final line\nending will return the same lines as an otherwise identical string\nwithout a final line ending.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"foo\\r\\nbar\\n\\nbaz\\n\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```\n\nThe final line ending isn't required:\n\n```\nlet text = \"foo\\nbar\\n\\r\\nbaz\";\nlet mut lines = text.lines();\n\nassert_eq!(Some(\"foo\"), lines.next());\nassert_eq!(Some(\"bar\"), lines.next());\nassert_eq!(Some(\"\"), lines.next());\nassert_eq!(Some(\"baz\"), lines.next());\n\nassert_eq!(None, lines.next());\n```",
      "id": "2:12618",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47204",
              "name": "Lines",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "lines",
      "span": null,
      "visibility": "public"
    },
    "2:12619": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_deprecated(since = \"1.4.0\", reason = \"use lines() instead now\")]",
        "#[inline]",
        "#[allow(deprecated)]"
      ],
      "crate_id": 2,
      "deprecation": {
        "note": "use lines() instead now",
        "since": "1.4.0"
      },
      "docs": "An iterator over the lines of a string.",
      "id": "2:12619",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47214",
              "name": "LinesAny",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "lines_any",
      "span": null,
      "visibility": "public"
    },
    "2:12620": {
      "attrs": [
        "#[must_use =\n  \"this returns the encoded string as an iterator, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"encode_utf16\", since = \"1.8.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns an iterator of `u16` over the string encoded as UTF-16.\n\n# Examples\n\nBasic usage:\n\n```\nlet text = \"Zażółć gęślą jaźń\";\n\nlet utf8_len = text.len();\nlet utf16_len = text.encode_utf16().count();\n\nassert!(utf16_len <= utf8_len);\n```",
      "id": "2:12620",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47242",
              "name": "EncodeUtf16",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "encode_utf16",
      "span": null,
      "visibility": "public"
    },
    "2:12621": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns `true` if the given pattern matches a sub-slice of\nthis string slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.contains(\"nana\"));\nassert!(!bananas.contains(\"apples\"));\n```",
      "id": "2:12621",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": "bool",
            "kind": "primitive"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "contains",
      "span": null,
      "visibility": "public"
    },
    "2:12624": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns `true` if the given pattern matches a prefix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.starts_with(\"bana\"));\nassert!(!bananas.starts_with(\"nana\"));\n```",
      "id": "2:12624",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": "bool",
            "kind": "primitive"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "starts_with",
      "span": null,
      "visibility": "public"
    },
    "2:12627": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns `true` if the given pattern matches a suffix of this\nstring slice.\n\nReturns `false` if it does not.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nBasic usage:\n\n```\nlet bananas = \"bananas\";\n\nassert!(bananas.ends_with(\"anas\"));\nassert!(!bananas.ends_with(\"nana\"));\n```",
      "id": "2:12627",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": "bool",
            "kind": "primitive"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "ends_with",
      "span": null,
      "visibility": "public"
    },
    "2:12630": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns the byte index of the first character of this string slice that\nmatches the pattern.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.find('L'), Some(0));\nassert_eq!(s.find('é'), Some(14));\nassert_eq!(s.find(\"pard\"), Some(17));\n```\n\nMore complex patterns using point-free style and closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.find(char::is_whitespace), Some(5));\nassert_eq!(s.find(char::is_lowercase), Some(1));\nassert_eq!(s.find(|c: char| c.is_whitespace() || c.is_lowercase()), Some(1));\nassert_eq!(s.find(|c: char| (c < 'o') && (c > 'a')), Some(4));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.find(x), None);\n```",
      "id": "2:12630",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": "usize",
                        "kind": "primitive"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:45100",
              "name": "Option",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`None`": "2:45100",
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "find",
      "span": null,
      "visibility": "public"
    },
    "2:12634": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns the byte index for the first character of the rightmost match of the pattern in\nthis string slice.\n\nReturns [`None`] if the pattern doesn't match.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nlet s = \"Löwe 老虎 Léopard Gepardi\";\n\nassert_eq!(s.rfind('L'), Some(13));\nassert_eq!(s.rfind('é'), Some(14));\nassert_eq!(s.rfind(\"pard\"), Some(24));\n```\n\nMore complex patterns with closures:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\n\nassert_eq!(s.rfind(char::is_whitespace), Some(12));\nassert_eq!(s.rfind(char::is_lowercase), Some(20));\n```\n\nNot finding the pattern:\n\n```\nlet s = \"Löwe 老虎 Léopard\";\nlet x: &[_] = &['1', '2'];\n\nassert_eq!(s.rfind(x), None);\n```",
      "id": "2:12634",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": "usize",
                        "kind": "primitive"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:45100",
              "name": "Option",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`None`": "2:45100",
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "rfind",
      "span": null,
      "visibility": "public"
    },
    "2:12638": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit`] method can be used.\n\n[`rsplit`]: str::rsplit\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]);\n\nlet v: Vec<&str> = \"\".split('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".split('X').collect();\nassert_eq!(v, [\"lion\", \"\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".split(\"::\").collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n\nlet v: Vec<&str> = \"abc1def2ghi\".split(char::is_numeric).collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n\nlet v: Vec<&str> = \"lionXtigerXleopard\".split(char::is_uppercase).collect();\nassert_eq!(v, [\"lion\", \"tiger\", \"leopard\"]);\n```\n\nIf the pattern is a slice of chars, split on each occurrence of any of the characters:\n\n```\nlet v: Vec<&str> = \"2020-11-03 23:59\".split(&['-', ' ', ':', '@'][..]).collect();\nassert_eq!(v, [\"2020\", \"11\", \"03\", \"23\", \"59\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".split(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"def\", \"ghi\"]);\n```\n\nIf a string contains multiple contiguous separators, you will end up\nwith empty strings in the output:\n\n```\nlet x = \"||||a||b|c\".to_string();\nlet d: Vec<_> = x.split('|').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nContiguous separators are separated by the empty string.\n\n```\nlet x = \"(///)\".to_string();\nlet d: Vec<_> = x.split('/').collect();\n\nassert_eq!(d, &[\"(\", \"\", \"\", \")\"]);\n```\n\nSeparators at the start or end of a string are neighbored\nby empty strings.\n\n```\nlet d: Vec<_> = \"010\".split(\"0\").collect();\nassert_eq!(d, &[\"\", \"1\", \"\"]);\n```\n\nWhen the empty string is used as a separator, it separates\nevery character in the string, along with the beginning\nand end of the string.\n\n```\nlet f: Vec<_> = \"rust\".split(\"\").collect();\nassert_eq!(f, &[\"\", \"r\", \"u\", \"s\", \"t\", \"\"]);\n```\n\nContiguous separators can lead to possibly surprising behavior\nwhen whitespace is used as the separator. This code is correct:\n\n```\nlet x = \"    a  b c\".to_string();\nlet d: Vec<_> = x.split(' ').collect();\n\nassert_eq!(d, &[\"\", \"\", \"\", \"\", \"a\", \"\", \"b\", \"c\"]);\n```\n\nIt does _not_ give you:\n\n```,ignore\nassert_eq!(d, &[\"a\", \"b\", \"c\"]);\n```\n\nUse [`split_whitespace`] for this behavior.\n\n[`split_whitespace`]: str::split_whitespace",
      "id": "2:12638",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:46950",
              "name": "Split",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`DoubleEndedIterator`": "2:7667",
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::rsplit": "1:15326",
        "str::split_whitespace": "1:15326"
      },
      "name": "split",
      "span": null,
      "visibility": "public"
    },
    "2:12641": {
      "attrs": [
        "#[stable(feature = \"split_inclusive\", since = \"1.51.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over substrings of this string slice, separated by\ncharacters matched by a pattern. Differs from the iterator produced by\n`split` in that `split_inclusive` leaves the matched part as the\nterminator of the substring.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\"]);\n```\n\nIf the last element of the string is matched,\nthat element will be considered the terminator of the preceding substring.\nThat substring will be the last item returned by the iterator.\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\\nlittle lamb\\nlittle lamb.\\n\"\n    .split_inclusive('\\n').collect();\nassert_eq!(v, [\"Mary had a little lamb\\n\", \"little lamb\\n\", \"little lamb.\\n\"]);\n```",
      "id": "2:12641",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:12020",
              "name": "SplitInclusive",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "split_inclusive",
      "span": null,
      "visibility": "public"
    },
    "2:12644": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split`] method can be used.\n\n[`split`]: str::split\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplit(' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"a\", \"had\", \"Mary\"]);\n\nlet v: Vec<&str> = \"\".rsplit('X').collect();\nassert_eq!(v, [\"\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplit('X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"\", \"lion\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplit(\"::\").collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lion\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplit(|c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"def\", \"abc\"]);\n```",
      "id": "2:12644",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:46968",
              "name": "RSplit",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`DoubleEndedIterator`": "2:7667",
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::split": "1:15326"
      },
      "name": "rsplit",
      "span": null,
      "visibility": "public"
    },
    "2:12647": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over substrings of the given string slice, separated by\ncharacters matched by a pattern.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring\nis skipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rsplit_terminator`] method can be used.\n\n[`rsplit_terminator`]: str::rsplit_terminator\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"A.B.\".split_terminator('.').collect();\nassert_eq!(v, [\"A\", \"B\"]);\n\nlet v: Vec<&str> = \"A..B..\".split_terminator(\".\").collect();\nassert_eq!(v, [\"A\", \"\", \"B\", \"\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".split_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"A\", \"B\", \"C\", \"D\"]);\n```",
      "id": "2:12647",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47000",
              "name": "SplitTerminator",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`DoubleEndedIterator`": "2:7667",
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::rsplit_terminator": "1:15326",
        "str::split": "1:15326"
      },
      "name": "split_terminator",
      "span": null,
      "visibility": "public"
    },
    "2:12650": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over substrings of `self`, separated by characters\nmatched by a pattern and yielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\nEquivalent to [`split`], except that the trailing substring is\nskipped if empty.\n\n[`split`]: str::split\n\nThis method can be used for string data that is _terminated_,\nrather than _separated_ by a pattern.\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a\nreverse search, and it will be double ended if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`split_terminator`] method can be\nused.\n\n[`split_terminator`]: str::split_terminator\n\n# Examples\n\n```\nlet v: Vec<&str> = \"A.B.\".rsplit_terminator('.').collect();\nassert_eq!(v, [\"B\", \"A\"]);\n\nlet v: Vec<&str> = \"A..B..\".rsplit_terminator(\".\").collect();\nassert_eq!(v, [\"\", \"B\", \"\", \"A\"]);\n\nlet v: Vec<&str> = \"A.B:C.D\".rsplit_terminator(&['.', ':'][..]).collect();\nassert_eq!(v, [\"D\", \"C\", \"B\", \"A\"]);\n```",
      "id": "2:12650",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47018",
              "name": "RSplitTerminator",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::split": "1:15326",
        "str::split_terminator": "1:15326"
      },
      "name": "rsplit_terminator",
      "span": null,
      "visibility": "public"
    },
    "2:12653": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over substrings of the given string slice, separated by a\npattern, restricted to returning at most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is\nnot efficient to support.\n\nIf the pattern allows a reverse search, the [`rsplitn`] method can be\nused.\n\n[`rsplitn`]: str::rsplitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lambda\".splitn(3, ' ').collect();\nassert_eq!(v, [\"Mary\", \"had\", \"a little lambda\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".splitn(3, \"X\").collect();\nassert_eq!(v, [\"lion\", \"\", \"tigerXleopard\"]);\n\nlet v: Vec<&str> = \"abcXdef\".splitn(1, 'X').collect();\nassert_eq!(v, [\"abcXdef\"]);\n\nlet v: Vec<&str> = \"\".splitn(1, 'X').collect();\nassert_eq!(v, [\"\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".splitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"abc\", \"defXghi\"]);\n```",
      "id": "2:12653",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "n",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47054",
              "name": "SplitN",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::rsplitn": "1:15326"
      },
      "name": "splitn",
      "span": null,
      "visibility": "public"
    },
    "2:12656": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over substrings of this string slice, separated by a\npattern, starting from the end of the string, restricted to returning\nat most `n` items.\n\nIf `n` substrings are returned, the last substring (the `n`th substring)\nwill contain the remainder of the string.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will not be double ended, because it is not\nefficient to support.\n\nFor splitting from the front, the [`splitn`] method can be used.\n\n[`splitn`]: str::splitn\n\n# Examples\n\nSimple patterns:\n\n```\nlet v: Vec<&str> = \"Mary had a little lamb\".rsplitn(3, ' ').collect();\nassert_eq!(v, [\"lamb\", \"little\", \"Mary had a\"]);\n\nlet v: Vec<&str> = \"lionXXtigerXleopard\".rsplitn(3, 'X').collect();\nassert_eq!(v, [\"leopard\", \"tiger\", \"lionX\"]);\n\nlet v: Vec<&str> = \"lion::tiger::leopard\".rsplitn(2, \"::\").collect();\nassert_eq!(v, [\"leopard\", \"lion::tiger\"]);\n```\n\nA more complex pattern, using a closure:\n\n```\nlet v: Vec<&str> = \"abc1defXghi\".rsplitn(2, |c| c == '1' || c == 'X').collect();\nassert_eq!(v, [\"ghi\", \"abc1def\"]);\n```",
      "id": "2:12656",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "n",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47072",
              "name": "RSplitN",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::splitn": "1:15326"
      },
      "name": "rsplitn",
      "span": null,
      "visibility": "public"
    },
    "2:12659": {
      "attrs": [
        "#[stable(feature = \"str_split_once\", since = \"1.52.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Splits the string on the first occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".split_once('='), None);\nassert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n```",
      "id": "2:12659",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "delimiter",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": [
                          {
                            "inner": {
                              "lifetime": "'a",
                              "mutable": false,
                              "type": {
                                "inner": "str",
                                "kind": "primitive"
                              }
                            },
                            "kind": "borrowed_ref"
                          },
                          {
                            "inner": {
                              "lifetime": "'a",
                              "mutable": false,
                              "type": {
                                "inner": "str",
                                "kind": "primitive"
                              }
                            },
                            "kind": "borrowed_ref"
                          }
                        ],
                        "kind": "tuple"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:45100",
              "name": "Option",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "split_once",
      "span": null,
      "visibility": "public"
    },
    "2:12662": {
      "attrs": [
        "#[stable(feature = \"str_split_once\", since = \"1.52.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Splits the string on the last occurrence of the specified delimiter and\nreturns prefix before delimiter and suffix after delimiter.\n\n# Examples\n\n```\nassert_eq!(\"cfg\".rsplit_once('='), None);\nassert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\nassert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n```",
      "id": "2:12662",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "delimiter",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": [
                          {
                            "inner": {
                              "lifetime": "'a",
                              "mutable": false,
                              "type": {
                                "inner": "str",
                                "kind": "primitive"
                              }
                            },
                            "kind": "borrowed_ref"
                          },
                          {
                            "inner": {
                              "lifetime": "'a",
                              "mutable": false,
                              "type": {
                                "inner": "str",
                                "kind": "primitive"
                              }
                            },
                            "kind": "borrowed_ref"
                          }
                        ],
                        "kind": "tuple"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:45100",
              "name": "Option",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "rsplit_once",
      "span": null,
      "visibility": "public"
    },
    "2:12665": {
      "attrs": [
        "#[stable(feature = \"str_matches\", since = \"1.2.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over the disjoint matches of a pattern within the given string\nslice.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatches`] method can be used.\n\n[`rmatches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".matches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".matches(char::is_numeric).collect();\nassert_eq!(v, [\"1\", \"2\", \"3\"]);\n```",
      "id": "2:12665",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47154",
              "name": "Matches",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`DoubleEndedIterator`": "2:7667",
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::matches": "1:15326"
      },
      "name": "matches",
      "span": null,
      "visibility": "public"
    },
    "2:12668": {
      "attrs": [
        "#[stable(feature = \"str_matches\", since = \"1.2.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over the disjoint matches of a pattern within this string slice,\nyielded in reverse order.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`matches`] method can be used.\n\n[`matches`]: str::matches\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<&str> = \"abcXXXabcYYYabc\".rmatches(\"abc\").collect();\nassert_eq!(v, [\"abc\", \"abc\", \"abc\"]);\n\nlet v: Vec<&str> = \"1abc2abc3\".rmatches(char::is_numeric).collect();\nassert_eq!(v, [\"3\", \"2\", \"1\"]);\n```",
      "id": "2:12668",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47172",
              "name": "RMatches",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`DoubleEndedIterator`": "2:7667",
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::matches": "1:15326"
      },
      "name": "rmatches",
      "span": null,
      "visibility": "public"
    },
    "2:12671": {
      "attrs": [
        "#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over the disjoint matches of a pattern within this string\nslice as well as the index that the match starts at.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the first match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator will be a [`DoubleEndedIterator`] if the pattern\nallows a reverse search and forward/reverse search yields the same\nelements. This is true for, e.g., [`char`], but not for `&str`.\n\nIf the pattern allows a reverse search but its results might differ\nfrom a forward search, the [`rmatch_indices`] method can be used.\n\n[`rmatch_indices`]: str::rmatch_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".match_indices(\"abc\").collect();\nassert_eq!(v, [(0, \"abc\"), (6, \"abc\"), (12, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".match_indices(\"abc\").collect();\nassert_eq!(v, [(1, \"abc\"), (4, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".match_indices(\"aba\").collect();\nassert_eq!(v, [(0, \"aba\")]); // only the first `aba`\n```",
      "id": "2:12671",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47100",
              "name": "MatchIndices",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`DoubleEndedIterator`": "2:7667",
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::rmatch_indices": "1:15326"
      },
      "name": "match_indices",
      "span": null,
      "visibility": "public"
    },
    "2:12674": {
      "attrs": [
        "#[stable(feature = \"str_match_indices\", since = \"1.5.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "An iterator over the disjoint matches of a pattern within `self`,\nyielded in reverse order along with the index of the match.\n\nFor matches of `pat` within `self` that overlap, only the indices\ncorresponding to the last match are returned.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Iterator behavior\n\nThe returned iterator requires that the pattern supports a reverse\nsearch, and it will be a [`DoubleEndedIterator`] if a forward/reverse\nsearch yields the same elements.\n\nFor iterating from the front, the [`match_indices`] method can be used.\n\n[`match_indices`]: str::match_indices\n\n# Examples\n\nBasic usage:\n\n```\nlet v: Vec<_> = \"abcXXXabcYYYabc\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(12, \"abc\"), (6, \"abc\"), (0, \"abc\")]);\n\nlet v: Vec<_> = \"1abcabc2\".rmatch_indices(\"abc\").collect();\nassert_eq!(v, [(4, \"abc\"), (1, \"abc\")]);\n\nlet v: Vec<_> = \"ababa\".rmatch_indices(\"aba\").collect();\nassert_eq!(v, [(2, \"aba\")]); // only the last `aba`\n```",
      "id": "2:12674",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'a"
                    },
                    {
                      "type": {
                        "inner": "P",
                        "kind": "generic"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47118",
              "name": "RMatchIndices",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`DoubleEndedIterator`": "2:7667",
        "prim@char": "1:15321",
        "self::pattern": "2:12229",
        "str::match_indices": "1:15326"
      },
      "name": "rmatch_indices",
      "span": null,
      "visibility": "public"
    },
    "2:12677": {
      "attrs": [
        "#[inline]",
        "#[must_use =\n  \"this returns the trimmed string as a slice, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a string slice with leading and trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\", s.trim());\n```",
      "id": "2:12677",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "trim",
      "span": null,
      "visibility": "public"
    },
    "2:12679": {
      "attrs": [
        "#[inline]",
        "#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('E') == s.trim_start().chars().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ע') == s.trim_start().chars().next());\n```",
      "id": "2:12679",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "trim_start",
      "span": null,
      "visibility": "public"
    },
    "2:12681": {
      "attrs": [
        "#[inline]",
        "#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\nassert_eq!(\" Hello\\tworld\", s.trim_end());\n```\n\nDirectionality:\n\n```\nlet s = \"  English  \";\nassert!(Some('h') == s.trim_end().chars().rev().next());\n\nlet s = \"  עברית  \";\nassert!(Some('ת') == s.trim_end().chars().rev().next());\n```",
      "id": "2:12681",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "trim_end",
      "span": null,
      "visibility": "public"
    },
    "2:12683": {
      "attrs": [
        "#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]",
        "#[inline]",
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_start`\",\n                   suggestion = \"trim_start\")]"
      ],
      "crate_id": 2,
      "deprecation": {
        "note": "superseded by `trim_start`",
        "since": "1.33.0"
      },
      "docs": "Returns a string slice with leading whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\"Hello\\tworld\\t\", s.trim_left());\n```\n\nDirectionality:\n\n```\nlet s = \"  English\";\nassert!(Some('E') == s.trim_left().chars().next());\n\nlet s = \"  עברית\";\nassert!(Some('ע') == s.trim_left().chars().next());\n```",
      "id": "2:12683",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "trim_left",
      "span": null,
      "visibility": "public"
    },
    "2:12684": {
      "attrs": [
        "#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]",
        "#[inline]",
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_deprecated(since = \"1.33.0\", reason = \"superseded by `trim_end`\",\n                   suggestion = \"trim_end\")]"
      ],
      "crate_id": 2,
      "deprecation": {
        "note": "superseded by `trim_end`",
        "since": "1.33.0"
      },
      "docs": "Returns a string slice with trailing whitespace removed.\n\n'Whitespace' is defined according to the terms of the Unicode Derived\nCore Property `White_Space`.\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \" Hello\\tworld\\t\";\n\nassert_eq!(\" Hello\\tworld\", s.trim_right());\n```\n\nDirectionality:\n\n```\nlet s = \"English  \";\nassert!(Some('h') == s.trim_right().chars().rev().next());\n\nlet s = \"עברית  \";\nassert!(Some('ת') == s.trim_right().chars().rev().next());\n```",
      "id": "2:12684",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": null,
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "trim_right",
      "span": null,
      "visibility": "public"
    },
    "2:12685": {
      "attrs": [
        "#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a string slice with all prefixes and suffixes that match a\npattern repeatedly removed.\n\nThe [pattern] can be a [`char`], a slice of [`char`]s, or a function\nor closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_matches('1'), \"foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_matches(char::is_numeric), \"foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_matches(x), \"foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n```",
      "id": "2:12685",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": "'a",
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12259",
                          "name": "DoubleEndedSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "trim_matches",
      "span": null,
      "visibility": "public"
    },
    "2:12688": {
      "attrs": [
        "#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `start` in this context means the first\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be left side, and for right-to-left languages like\nArabic or Hebrew, this will be the right side.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_start_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_start_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n```",
      "id": "2:12688",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": "'a",
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "trim_start_matches",
      "span": null,
      "visibility": "public"
    },
    "2:12691": {
      "attrs": [
        "#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"str_strip\", since = \"1.45.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a string slice with the prefix removed.\n\nIf the string starts with the pattern `prefix`, returns substring after the prefix, wrapped\nin `Some`.  Unlike `trim_start_matches`, this method removes the prefix exactly once.\n\nIf the string does not start with `prefix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"foo:bar\".strip_prefix(\"foo:\"), Some(\"bar\"));\nassert_eq!(\"foo:bar\".strip_prefix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_prefix(\"foo\"), Some(\"foo\"));\n```",
      "id": "2:12691",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "prefix",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": {
                          "lifetime": "'a",
                          "mutable": false,
                          "type": {
                            "inner": "str",
                            "kind": "primitive"
                          }
                        },
                        "kind": "borrowed_ref"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:45100",
              "name": "Option",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "strip_prefix",
      "span": null,
      "visibility": "public"
    },
    "2:12694": {
      "attrs": [
        "#[must_use =\n  \"this returns the remaining substring as a new slice, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"str_strip\", since = \"1.45.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a string slice with the suffix removed.\n\nIf the string ends with the pattern `suffix`, returns the substring before the suffix,\nwrapped in `Some`.  Unlike `trim_end_matches`, this method removes the suffix exactly once.\n\nIf the string does not end with `suffix`, returns `None`.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Examples\n\n```\nassert_eq!(\"bar:foo\".strip_suffix(\":foo\"), Some(\"bar\"));\nassert_eq!(\"bar:foo\".strip_suffix(\"bar\"), None);\nassert_eq!(\"foofoo\".strip_suffix(\"foo\"), Some(\"foo\"));\n```",
      "id": "2:12694",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "suffix",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": {
                          "lifetime": "'a",
                          "mutable": false,
                          "type": {
                            "inner": "str",
                            "kind": "primitive"
                          }
                        },
                        "kind": "borrowed_ref"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:45100",
              "name": "Option",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "strip_suffix",
      "span": null,
      "visibility": "public"
    },
    "2:12697": {
      "attrs": [
        "#[must_use =\n  \"this returns the trimmed string as a new slice, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"trim_direction\", since = \"1.30.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. `end` in this context means the last\nposition of that byte string; for a left-to-right language like English or\nRussian, this will be right side, and for right-to-left languages like\nArabic or Hebrew, this will be the left side.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_end_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_end_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_end_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```",
      "id": "2:12697",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": "'a",
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "trim_end_matches",
      "span": null,
      "visibility": "public"
    },
    "2:12700": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_start_matches`\", suggestion =\n                   \"trim_start_matches\")]"
      ],
      "crate_id": 2,
      "deprecation": {
        "note": "superseded by `trim_start_matches`",
        "since": "1.33.0"
      },
      "docs": "Returns a string slice with all prefixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Left' in this context means the first\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _right_ side, not the left.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"11foo1bar11\".trim_left_matches('1'), \"foo1bar11\");\nassert_eq!(\"123foo1bar123\".trim_left_matches(char::is_numeric), \"foo1bar123\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_left_matches(x), \"foo1bar12\");\n```",
      "id": "2:12700",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": "'a",
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "trim_left_matches",
      "span": null,
      "visibility": "public"
    },
    "2:12703": {
      "attrs": [
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[rustc_deprecated(since = \"1.33.0\", reason =\n                   \"superseded by `trim_end_matches`\", suggestion =\n                   \"trim_end_matches\")]"
      ],
      "crate_id": 2,
      "deprecation": {
        "note": "superseded by `trim_end_matches`",
        "since": "1.33.0"
      },
      "docs": "Returns a string slice with all suffixes that match a pattern\nrepeatedly removed.\n\nThe [pattern] can be a `&str`, [`char`], a slice of [`char`]s, or a\nfunction or closure that determines if a character matches.\n\n[`char`]: prim@char\n[pattern]: self::pattern\n\n# Text directionality\n\nA string is a sequence of bytes. 'Right' in this context means the last\nposition of that byte string; for a language like Arabic or Hebrew\nwhich are 'right to left' rather than 'left to right', this will be\nthe _left_ side, not the right.\n\n# Examples\n\nSimple patterns:\n\n```\nassert_eq!(\"11foo1bar11\".trim_right_matches('1'), \"11foo1bar\");\nassert_eq!(\"123foo1bar123\".trim_right_matches(char::is_numeric), \"123foo1bar\");\n\nlet x: &[_] = &['1', '2'];\nassert_eq!(\"12foo1bar12\".trim_right_matches(x), \"12foo1bar\");\n```\n\nA more complex pattern, using a closure:\n\n```\nassert_eq!(\"1fooX\".trim_right_matches(|c| c == '1' || c == 'X'), \"1foo\");\n```",
      "id": "2:12703",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ]
          ],
          "output": {
            "inner": {
              "lifetime": "'a",
              "mutable": false,
              "type": {
                "inner": "str",
                "kind": "primitive"
              }
            },
            "kind": "borrowed_ref"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            },
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12254",
                          "name": "ReverseSearcher",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": {
                    "name": "Searcher",
                    "self_type": {
                      "inner": "P",
                      "kind": "generic"
                    },
                    "trait": {
                      "inner": {
                        "args": {
                          "angle_bracketed": {
                            "args": [
                              {
                                "lifetime": "'a"
                              }
                            ],
                            "bindings": []
                          }
                        },
                        "id": "2:12239",
                        "name": "Pattern",
                        "param_names": []
                      },
                      "kind": "resolved_path"
                    }
                  },
                  "kind": "qualified_path"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "prim@char": "1:15321",
        "self::pattern": "2:12229"
      },
      "name": "trim_right_matches",
      "span": null,
      "visibility": "public"
    },
    "2:12706": {
      "attrs": [
        "#[inline]",
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Parses this string slice into another type.\n\nBecause `parse` is so general, it can cause problems with type\ninference. As such, `parse` is one of the few times you'll see\nthe syntax affectionately known as the 'turbofish': `::<>`. This\nhelps the inference algorithm understand specifically which type\nyou're trying to parse into.\n\n`parse` can parse into any type that implements the [`FromStr`] trait.\n\n# Errors\n\nWill return [`Err`] if it's not possible to parse this string slice into\nthe desired type.\n\n[`Err`]: FromStr::Err\n\n# Examples\n\nBasic usage\n\n```\nlet four: u32 = \"4\".parse().unwrap();\n\nassert_eq!(4, four);\n```\n\nUsing the 'turbofish' instead of annotating `four`:\n\n```\nlet four = \"4\".parse::<u32>();\n\nassert_eq!(Ok(4), four);\n```\n\nFailing to parse:\n\n```\nlet nope = \"j\".parse::<u32>();\n\nassert!(nope.is_err());\n```",
      "id": "2:12706",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": "F",
                        "kind": "generic"
                      }
                    },
                    {
                      "type": {
                        "inner": {
                          "name": "Err",
                          "self_type": {
                            "inner": "F",
                            "kind": "generic"
                          },
                          "trait": {
                            "inner": {
                              "args": {
                                "angle_bracketed": {
                                  "args": [],
                                  "bindings": []
                                }
                              },
                              "id": "2:12167",
                              "name": "FromStr",
                              "param_names": []
                            },
                            "kind": "resolved_path"
                          }
                        },
                        "kind": "qualified_path"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:45226",
              "name": "Result",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "F"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:12167",
                          "name": "FromStr",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "F",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "FromStr::Err": "2:12168",
        "`FromStr`": "2:12167"
      },
      "name": "parse",
      "span": null,
      "visibility": "public"
    },
    "2:12708": {
      "attrs": [
        "#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]",
        "#[must_use]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Checks if all characters in this string are within the ASCII range.\n\n# Examples\n\n```\nlet ascii = \"hello!\\n\";\nlet non_ascii = \"Grüße, Jürgen ❤\";\n\nassert!(ascii.is_ascii());\nassert!(!non_ascii.is_ascii());\n```",
      "id": "2:12708",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": "bool",
            "kind": "primitive"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "is_ascii",
      "span": null,
      "visibility": "public"
    },
    "2:12709": {
      "attrs": [
        "#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]",
        "#[must_use]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Checks that two strings are an ASCII case-insensitive match.\n\nSame as `to_ascii_lowercase(a) == to_ascii_lowercase(b)`,\nbut without allocating and copying temporaries.\n\n# Examples\n\n```\nassert!(\"Ferris\".eq_ignore_ascii_case(\"FERRIS\"));\nassert!(\"Ferrös\".eq_ignore_ascii_case(\"FERRöS\"));\nassert!(!\"Ferrös\".eq_ignore_ascii_case(\"FERRÖS\"));\n```",
      "id": "2:12709",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "other",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "str",
                    "kind": "primitive"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": "bool",
            "kind": "primitive"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "eq_ignore_ascii_case",
      "span": null,
      "visibility": "public"
    },
    "2:12710": {
      "attrs": [
        "#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Converts this string to its ASCII upper case equivalent in-place.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo return a new uppercased value without modifying the existing one, use\n[`to_ascii_uppercase()`].\n\n[`to_ascii_uppercase()`]: #method.to_ascii_uppercase\n\n# Examples\n\n```\nlet mut s = String::from(\"Grüße, Jürgen ❤\");\n\ns.make_ascii_uppercase();\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s);\n```",
      "id": "2:12710",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": [],
            "kind": "tuple"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "make_ascii_uppercase",
      "span": null,
      "visibility": "public"
    },
    "2:12711": {
      "attrs": [
        "#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]",
        "#[inline]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Converts this string to its ASCII lower case equivalent in-place.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo return a new lowercased value without modifying the existing one, use\n[`to_ascii_lowercase()`].\n\n[`to_ascii_lowercase()`]: #method.to_ascii_lowercase\n\n# Examples\n\n```\nlet mut s = String::from(\"GRÜßE, JÜRGEN ❤\");\n\ns.make_ascii_lowercase();\n\nassert_eq!(\"grÜße, jÜrgen ❤\", s);\n```",
      "id": "2:12711",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": true,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": [],
            "kind": "tuple"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "make_ascii_lowercase",
      "span": null,
      "visibility": "public"
    },
    "2:12712": {
      "attrs": [
        "#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"str_escape\", since = \"1.34.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Return an iterator that escapes each char in `self` with [`char::escape_debug`].\n\nNote: only extended grapheme codepoints that begin the string will be\nescaped.\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_debug() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_debug());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"❤\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_debug().to_string(), \"❤\\\\n!\");\n```",
      "id": "2:12712",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47249",
              "name": "EscapeDebug",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`char::escape_debug`": "1:15321"
      },
      "name": "escape_debug",
      "span": null,
      "visibility": "public"
    },
    "2:12714": {
      "attrs": [
        "#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"str_escape\", since = \"1.34.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Return an iterator that escapes each char in `self` with [`char::escape_default`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_default() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_default());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\n!\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n```",
      "id": "2:12714",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47258",
              "name": "EscapeDefault",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`char::escape_default`": "1:15321"
      },
      "name": "escape_default",
      "span": null,
      "visibility": "public"
    },
    "2:12715": {
      "attrs": [
        "#[must_use =\n  \"this returns the escaped string as an iterator, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"str_escape\", since = \"1.34.0\")]"
      ],
      "crate_id": 2,
      "deprecation": null,
      "docs": "Return an iterator that escapes each char in `self` with [`char::escape_unicode`].\n\n# Examples\n\nAs an iterator:\n\n```\nfor c in \"❤\\n!\".escape_unicode() {\n    print!(\"{}\", c);\n}\nprintln!();\n```\n\nUsing `println!` directly:\n\n```\nprintln!(\"{}\", \"❤\\n!\".escape_unicode());\n```\n\n\nBoth are equivalent to:\n\n```\nprintln!(\"\\\\u{{2764}}\\\\u{{a}}\\\\u{{21}}\");\n```\n\nUsing `to_string`:\n\n```\nassert_eq!(\"❤\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n```",
      "id": "2:12715",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "lifetime": "'_"
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "2:47267",
              "name": "EscapeUnicode",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`char::escape_unicode`": "1:15321"
      },
      "name": "escape_unicode",
      "span": null,
      "visibility": "public"
    },
    "2:12938": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:12938",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:12939",
          "2:12940"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Future",
      "span": null,
      "visibility": "public"
    },
    "2:12953": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:12953",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:12954",
          "2:12955",
          "2:12956"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "IntoFuture",
      "span": null,
      "visibility": "public"
    },
    "2:13336": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:13336",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": [
          "2:13337",
          "2:13338",
          "2:13339",
          "2:13340"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "GlobalAlloc",
      "span": null,
      "visibility": "public"
    },
    "2:13407": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:13407",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": [
          "2:13408",
          "2:13409",
          "2:13410",
          "2:13411",
          "2:13412",
          "2:13413",
          "2:13414"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Allocator",
      "span": null,
      "visibility": "public"
    },
    "2:21945": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:21945",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:21935",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:21946"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "SupportedLaneCount",
      "span": null,
      "visibility": "public"
    },
    "2:22088": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:22088",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:22734",
                  "name": "SimdElement",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          },
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:22079",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "MaskElement",
      "span": null,
      "visibility": "public"
    },
    "2:22734": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:22734",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:22730",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          },
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:3028",
                  "name": "Copy",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": [
          "2:22735"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "SimdElement",
      "span": null,
      "visibility": "public"
    },
    "2:2617": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2617",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Borrowed"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "Borrowed",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2619"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Borrow",
      "span": null,
      "visibility": "public"
    },
    "2:2620": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2620",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "Borrowed",
                            "kind": "generic"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:2617",
                  "name": "Borrow",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Borrowed"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "Borrowed",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2622"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "BorrowMut",
      "span": null,
      "visibility": "public"
    },
    "2:2639": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2639",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2640",
          "2:2641"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Clone",
      "span": null,
      "visibility": "public"
    },
    "2:2669": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2669",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "Rhs",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2671",
          "2:2672"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "PartialEq",
      "span": null,
      "visibility": "public"
    },
    "2:2674": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2674",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "Self",
                            "kind": "generic"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:2669",
                  "name": "PartialEq",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2675"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Eq",
      "span": null,
      "visibility": "public"
    },
    "2:2705": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2705",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:2674",
                  "name": "Eq",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          },
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "Self",
                            "kind": "generic"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:2716",
                  "name": "PartialOrd",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2706",
          "2:2707",
          "2:2708",
          "2:2709"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Ord",
      "span": null,
      "visibility": "public"
    },
    "2:2716": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2716",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "Rhs",
                            "kind": "generic"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:2669",
                  "name": "PartialEq",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "Rhs",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2718",
          "2:2719",
          "2:2720",
          "2:2721",
          "2:2722"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "PartialOrd",
      "span": null,
      "visibility": "public"
    },
    "2:2853": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2853",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:2852",
                  "name": "Sealed",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Int"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2855"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "FloatToInt",
      "span": null,
      "visibility": "public"
    },
    "2:2915": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2915",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "T",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2917"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "AsRef",
      "span": null,
      "visibility": "public"
    },
    "2:2918": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2918",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "T",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2920"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "AsMut",
      "span": null,
      "visibility": "public"
    },
    "2:2921": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2921",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2923"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Into",
      "span": null,
      "visibility": "public"
    },
    "2:2924": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2924",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2926"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "From",
      "span": null,
      "visibility": "public"
    },
    "2:2927": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2927",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2929",
          "2:2930"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "TryInto",
      "span": null,
      "visibility": "public"
    },
    "2:2931": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2931",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2933",
          "2:2934"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "TryFrom",
      "span": null,
      "visibility": "public"
    },
    "2:2996": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:2996",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:2997"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Default",
      "span": null,
      "visibility": "public"
    },
    "2:3018": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3018",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": true,
        "is_unsafe": true,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "Send",
      "span": null,
      "visibility": "public"
    },
    "2:3023": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3023",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": true,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "Sized",
      "span": null,
      "visibility": "public"
    },
    "2:3026": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3026",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "StructuralPartialEq",
      "span": null,
      "visibility": "public"
    },
    "2:3027": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3027",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "StructuralEq",
      "span": null,
      "visibility": "public"
    },
    "2:3028": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3028",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:2639",
                  "name": "Clone",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "Copy",
      "span": null,
      "visibility": "public"
    },
    "2:3030": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3030",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": true,
        "is_unsafe": true,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "Sync",
      "span": null,
      "visibility": "public"
    },
    "2:3059": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3059",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": true,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "Unpin",
      "span": null,
      "visibility": "public"
    },
    "2:3085": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3085",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3087",
          "2:3088"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Add",
      "span": null,
      "visibility": "public"
    },
    "2:3090": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3090",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3092",
          "2:3093"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Sub",
      "span": null,
      "visibility": "public"
    },
    "2:3095": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3095",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3097",
          "2:3098"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Mul",
      "span": null,
      "visibility": "public"
    },
    "2:3100": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3100",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3102",
          "2:3103"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Div",
      "span": null,
      "visibility": "public"
    },
    "2:3106": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3106",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3108",
          "2:3109"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Rem",
      "span": null,
      "visibility": "public"
    },
    "2:3112": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3112",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3113",
          "2:3114"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Neg",
      "span": null,
      "visibility": "public"
    },
    "2:3116": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3116",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3118"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "AddAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3120": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3120",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3122"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "SubAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3124": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3124",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3126"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "MulAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3128": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3128",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3130"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "DivAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3132": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3132",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3134"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "RemAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3137": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3137",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3138",
          "2:3139"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Not",
      "span": null,
      "visibility": "public"
    },
    "2:3141": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3141",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3143",
          "2:3144"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "BitAnd",
      "span": null,
      "visibility": "public"
    },
    "2:3146": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3146",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3148",
          "2:3149"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "BitOr",
      "span": null,
      "visibility": "public"
    },
    "2:3151": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3151",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3153",
          "2:3154"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "BitXor",
      "span": null,
      "visibility": "public"
    },
    "2:3156": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3156",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3158",
          "2:3159"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Shl",
      "span": null,
      "visibility": "public"
    },
    "2:3162": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3162",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3164",
          "2:3165"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Shr",
      "span": null,
      "visibility": "public"
    },
    "2:3168": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3168",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3170"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "BitAndAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3172": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3172",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3174"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "BitOrAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3176": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3176",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3178"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "BitXorAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3180": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3180",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3182"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "ShlAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3185": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3185",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "Rhs"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3187"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "ShrAssign",
      "span": null,
      "visibility": "public"
    },
    "2:3233": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3233",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3234",
          "2:3235"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Deref",
      "span": null,
      "visibility": "public"
    },
    "2:3246": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3246",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:3233",
                  "name": "Deref",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3247"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "DerefMut",
      "span": null,
      "visibility": "public"
    },
    "2:3257": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3257",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3258"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Drop",
      "span": null,
      "visibility": "public"
    },
    "2:3260": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3260",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "Args",
                            "kind": "generic"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:3263",
                  "name": "FnMut",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Args"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3262"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Fn",
      "span": null,
      "visibility": "public"
    },
    "2:3263": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3263",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "Args",
                            "kind": "generic"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:3266",
                  "name": "FnOnce",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Args"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3265"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "FnMut",
      "span": null,
      "visibility": "public"
    },
    "2:3266": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3266",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Args"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3268",
          "2:3269"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "FnOnce",
      "span": null,
      "visibility": "public"
    },
    "2:3300": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3300",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": [],
                    "kind": "tuple"
                  }
                }
              },
              "name": "R"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3302",
          "2:3303",
          "2:3304"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Generator",
      "span": null,
      "visibility": "public"
    },
    "2:3318": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3318",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Idx"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "Idx",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3320",
          "2:3321"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Index",
      "span": null,
      "visibility": "public"
    },
    "2:3322": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3322",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "Idx",
                            "kind": "generic"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:3318",
                  "name": "Index",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Idx"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "Idx",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3324"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "IndexMut",
      "span": null,
      "visibility": "public"
    },
    "2:3389": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3389",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "T",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3391",
          "2:3392",
          "2:3393"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "RangeBounds",
      "span": null,
      "visibility": "public"
    },
    "2:3458": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3458",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "T",
                            "kind": "generic"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:3389",
                  "name": "RangeBounds",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "T",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "OneSidedRange",
      "span": null,
      "visibility": "public"
    },
    "2:3470": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3470",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": {
                              "name": "Residual",
                              "self_type": {
                                "inner": "Self",
                                "kind": "generic"
                              },
                              "trait": {
                                "inner": {
                                  "args": {
                                    "angle_bracketed": {
                                      "args": [],
                                      "bindings": []
                                    }
                                  },
                                  "id": "2:3470",
                                  "name": "Try",
                                  "param_names": []
                                },
                                "kind": "resolved_path"
                              }
                            },
                            "kind": "qualified_path"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:3475",
                  "name": "FromResidual",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3471",
          "2:3472",
          "2:3473",
          "2:3474"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Try",
      "span": null,
      "visibility": "public"
    },
    "2:3475": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3475",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": {
                      "name": "Residual",
                      "self_type": {
                        "inner": "Self",
                        "kind": "generic"
                      },
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3470",
                          "name": "Try",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    },
                    "kind": "qualified_path"
                  }
                }
              },
              "name": "R"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3477"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "FromResidual",
      "span": null,
      "visibility": "public"
    },
    "2:3478": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3478",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "O"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3480"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Residual",
      "span": null,
      "visibility": "public"
    },
    "2:3505": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3505",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "T",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "CoerceUnsized",
      "span": null,
      "visibility": "public"
    },
    "2:3542": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3542",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "T"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "DispatchFromDyn",
      "span": null,
      "visibility": "public"
    },
    "2:3727": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:3727",
      "inner": {
        "bounds": [
          {
            "outlives": "'static"
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:3728"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Any",
      "span": null,
      "visibility": "public"
    },
    "2:6993": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:6993",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:6994",
                  "name": "TrustedRandomAccessNoCoerce",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "TrustedRandomAccess",
      "span": null,
      "visibility": "public"
    },
    "2:7172": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:7172",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:2639",
                  "name": "Clone",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          },
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "Self",
                            "kind": "generic"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "2:2716",
                  "name": "PartialOrd",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:7173",
          "2:7174",
          "2:7175",
          "2:7176",
          "2:7177",
          "2:7178",
          "2:7179"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Step",
      "span": null,
      "visibility": "public"
    },
    "2:7582": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:7582",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "A"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:7584"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Sum",
      "span": null,
      "visibility": "public"
    },
    "2:7586": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:7586",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                }
              },
              "name": "A"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:7588"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Product",
      "span": null,
      "visibility": "public"
    },
    "2:7619": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:7619",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "A"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:7621"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "FromIterator",
      "span": null,
      "visibility": "public"
    },
    "2:7623": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:7623",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:7624",
          "2:7625",
          "2:7626"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "IntoIterator",
      "span": null,
      "visibility": "public"
    },
    "2:7632": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:7632",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "A"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:7634",
          "2:7636",
          "2:7637"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Extend",
      "span": null,
      "visibility": "public"
    },
    "2:7667": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:7667",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:7812",
                  "name": "Iterator",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:7668",
          "2:7669",
          "2:7670",
          "2:7671",
          "2:7675",
          "2:7678"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "DoubleEndedIterator",
      "span": null,
      "visibility": "public"
    },
    "2:7692": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:7692",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:7812",
                  "name": "Iterator",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:7693",
          "2:7694"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "ExactSizeIterator",
      "span": null,
      "visibility": "public"
    },
    "2:7812": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:7812",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:7813",
          "2:7814",
          "2:7815",
          "2:7816",
          "2:7818",
          "2:7821",
          "2:7822",
          "2:7823",
          "2:7824",
          "2:7826",
          "2:7828",
          "2:7829",
          "2:7831",
          "2:7834",
          "2:7841",
          "2:7843",
          "2:7846",
          "2:7847",
          "2:7848",
          "2:7850",
          "2:7852",
          "2:7855",
          "2:7856",
          "2:7857",
          "2:7861",
          "2:7864",
          "2:7865",
          "2:7866",
          "2:7868",
          "2:7869",
          "2:7871",
          "2:7881",
          "2:7896",
          "2:7898",
          "2:7902",
          "2:7911",
          "2:7914",
          "2:7916",
          "2:7919",
          "2:7926",
          "2:7933",
          "2:7940",
          "2:7949",
          "2:7959",
          "2:7966",
          "2:7973",
          "2:7974",
          "2:7975",
          "2:7987",
          "2:7994",
          "2:8006",
          "2:8013",
          "2:8014",
          "2:8019",
          "2:8022",
          "2:8025",
          "2:8026",
          "2:8028",
          "2:8030",
          "2:8033",
          "2:8036",
          "2:8039",
          "2:8042",
          "2:8045",
          "2:8048",
          "2:8050",
          "2:8052",
          "2:8054",
          "2:8056",
          "2:8058",
          "2:8059",
          "2:8067",
          "2:8070"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Iterator",
      "span": null,
      "visibility": "public"
    },
    "2:8082": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:8082",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:7812",
                  "name": "Iterator",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "FusedIterator",
      "span": null,
      "visibility": "public"
    },
    "2:8085": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:8085",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:7812",
                  "name": "Iterator",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "TrustedLen",
      "span": null,
      "visibility": "public"
    },
    "2:8089": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:8089",
      "inner": {
        "bounds": [
          {
            "trait_bound": {
              "generic_params": [],
              "modifier": "none",
              "trait": {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [],
                      "bindings": []
                    }
                  },
                  "id": "2:7172",
                  "name": "Step",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            }
          }
        ],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": true,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "TrustedStep",
      "span": null,
      "visibility": "public"
    },
    "2:8538": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:8538",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": true,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "UnwindSafe",
      "span": null,
      "visibility": "public"
    },
    "2:8539": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:8539",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": true,
        "is_unsafe": false,
        "items": []
      },
      "kind": "trait",
      "links": {},
      "name": "RefUnwindSafe",
      "span": null,
      "visibility": "public"
    },
    "2:9069": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9069",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9070",
          "2:9071",
          "2:9072"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Stream",
      "span": null,
      "visibility": "public"
    },
    "2:9527": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9527",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9528",
          "2:9529",
          "2:9531"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Write",
      "span": null,
      "visibility": "public"
    },
    "2:9576": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9576",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9577"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Debug",
      "span": null,
      "visibility": "public"
    },
    "2:9583": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9583",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9584"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Display",
      "span": null,
      "visibility": "public"
    },
    "2:9585": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9585",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9586"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Octal",
      "span": null,
      "visibility": "public"
    },
    "2:9587": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9587",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9588"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Binary",
      "span": null,
      "visibility": "public"
    },
    "2:9589": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9589",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9590"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "LowerHex",
      "span": null,
      "visibility": "public"
    },
    "2:9591": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9591",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9592"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "UpperHex",
      "span": null,
      "visibility": "public"
    },
    "2:9593": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9593",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9594"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Pointer",
      "span": null,
      "visibility": "public"
    },
    "2:9595": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9595",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9596"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "LowerExp",
      "span": null,
      "visibility": "public"
    },
    "2:9597": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9597",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9598"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "UpperExp",
      "span": null,
      "visibility": "public"
    },
    "2:9783": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9783",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9784",
          "2:9786"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Hash",
      "span": null,
      "visibility": "public"
    },
    "2:9793": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9793",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9794",
          "2:9795",
          "2:9796",
          "2:9797",
          "2:9798",
          "2:9799",
          "2:9800",
          "2:9801",
          "2:9802",
          "2:9803",
          "2:9804",
          "2:9805",
          "2:9806",
          "2:9807"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Hasher",
      "span": null,
      "visibility": "public"
    },
    "2:9824": {
      "attrs": [],
      "crate_id": 2,
      "deprecation": null,
      "docs": null,
      "id": "2:9824",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "2:9825",
          "2:9826",
          "2:9827"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "BuildHasher",
      "span": null,
      "visibility": "public"
    },
    "5:5168": {
      "attrs": [],
      "crate_id": 5,
      "deprecation": null,
      "docs": null,
      "id": "5:5168",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Item"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "maybe",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "2:3023",
                          "name": "Sized",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "Item",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "5:5170",
          "5:5171"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Concat",
      "span": null,
      "visibility": "public"
    },
    "5:5172": {
      "attrs": [],
      "crate_id": 5,
      "deprecation": null,
      "docs": null,
      "id": "5:5172",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "Separator"
            }
          ],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "5:5174",
          "5:5175"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "Join",
      "span": null,
      "visibility": "public"
    },
    "5:5416": {
      "attrs": [
        "#[lang = \"str_alloc\"]",
        "#[cfg(not(test))]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Methods for string slices.",
      "id": "5:5416",
      "inner": {
        "blanket_impl": null,
        "for": {
          "inner": "str",
          "kind": "primitive"
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "is_unsafe": false,
        "items": [
          "5:5417",
          "5:5418",
          "5:5421",
          "5:5424",
          "5:5436",
          "5:5437",
          "5:5438",
          "5:5439",
          "5:5440"
        ],
        "negative": false,
        "provided_trait_methods": [],
        "synthetic": false,
        "trait": null
      },
      "kind": "impl",
      "links": {},
      "name": null,
      "span": null,
      "visibility": {
        "restricted": {
          "parent": "5:5236",
          "path": "::str"
        }
      }
    },
    "5:5417": {
      "attrs": [
        "#[stable(feature = \"str_box_extras\", since = \"1.20.0\")]",
        "#[must_use = \"`self` will be dropped if the result is not used\"]",
        "#[inline]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Converts a `Box<str>` into a `Box<[u8]>` without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is a string\";\nlet boxed_str = s.to_owned().into_boxed_str();\nlet boxed_bytes = boxed_str.into_boxed_bytes();\nassert_eq!(*boxed_bytes, *s.as_bytes());\n```",
      "id": "5:5417",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "str",
                            "kind": "primitive"
                          }
                        },
                        {
                          "type": {
                            "inner": {
                              "args": {
                                "angle_bracketed": {
                                  "args": [],
                                  "bindings": []
                                }
                              },
                              "id": "5:7404",
                              "name": "Global",
                              "param_names": []
                            },
                            "kind": "resolved_path"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "5:313",
                  "name": "Box",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [
                    {
                      "type": {
                        "inner": {
                          "inner": "u8",
                          "kind": "primitive"
                        },
                        "kind": "slice"
                      }
                    },
                    {
                      "type": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [],
                              "bindings": []
                            }
                          },
                          "id": "5:7404",
                          "name": "Global",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  ],
                  "bindings": []
                }
              },
              "id": "5:313",
              "name": "Box",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {},
      "name": "into_boxed_bytes",
      "span": null,
      "visibility": "public"
    },
    "5:5418": {
      "attrs": [
        "#[cfg(not(no_global_oom_handling))]",
        "#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"rust1\", since = \"1.0.0\")]",
        "#[inline]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Replaces all matches of a pattern with another string.\n\n`replace` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"this is old\";\n\nassert_eq!(\"this is new\", s.replace(\"old\", \"new\"));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replace(\"cookie monster\", \"little lamb\"));\n```",
      "id": "5:5418",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "from",
              {
                "inner": "P",
                "kind": "generic"
              }
            ],
            [
              "to",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "str",
                    "kind": "primitive"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "bindings": []
                }
              },
              "id": "5:7621",
              "name": "String",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`String`": "5:7621"
      },
      "name": "replace",
      "span": null,
      "visibility": "public"
    },
    "5:5421": {
      "attrs": [
        "#[cfg(not(no_global_oom_handling))]",
        "#[must_use =\n  \"this returns the replaced string as a new allocation, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"str_replacen\", since = \"1.16.0\")]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Replaces first N matches of a pattern with another string.\n\n`replacen` creates a new [`String`], and copies the data from this string slice into it.\nWhile doing so, it attempts to find matches of a pattern. If it finds any, it\nreplaces them with the replacement string slice at most `count` times.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"foo foo 123 foo\";\nassert_eq!(\"new new 123 foo\", s.replacen(\"foo\", \"new\", 2));\nassert_eq!(\"faa fao 123 foo\", s.replacen('o', \"a\", 3));\nassert_eq!(\"foo foo new23 foo\", s.replacen(char::is_numeric, \"new\", 1));\n```\n\nWhen the pattern doesn't match:\n\n```\nlet s = \"this is old\";\nassert_eq!(s, s.replacen(\"cookie monster\", \"little lamb\", 10));\n```",
      "id": "5:5421",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": "'a",
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "pat",
              {
                "inner": "P",
                "kind": "generic"
              }
            ],
            [
              "to",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "str",
                    "kind": "primitive"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "count",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "bindings": []
                }
              },
              "id": "5:7621",
              "name": "String",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [
            {
              "kind": {
                "lifetime": {
                  "outlives": []
                }
              },
              "name": "'a"
            },
            {
              "kind": {
                "type": {
                  "bounds": [],
                  "default": null
                }
              },
              "name": "P"
            }
          ],
          "where_predicates": [
            {
              "bound_predicate": {
                "bounds": [
                  {
                    "trait_bound": {
                      "generic_params": [],
                      "modifier": "none",
                      "trait": {
                        "inner": {
                          "args": {
                            "angle_bracketed": {
                              "args": [
                                {
                                  "lifetime": "'a"
                                }
                              ],
                              "bindings": []
                            }
                          },
                          "id": "2:12239",
                          "name": "Pattern",
                          "param_names": []
                        },
                        "kind": "resolved_path"
                      }
                    }
                  }
                ],
                "ty": {
                  "inner": "P",
                  "kind": "generic"
                }
              }
            }
          ]
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`String`": "5:7621"
      },
      "name": "replacen",
      "span": null,
      "visibility": "public"
    },
    "5:5424": {
      "attrs": [
        "#[cfg(not(no_global_oom_handling))]",
        "#[must_use =\n  \"this returns the lowercase string as a new String, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Returns the lowercase equivalent of this string slice, as a new [`String`].\n\n'Lowercase' is defined according to the terms of the Unicode Derived Core Property\n`Lowercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"HELLO\";\n\nassert_eq!(\"hello\", s.to_lowercase());\n```\n\nA tricky example, with sigma:\n\n```\nlet sigma = \"Σ\";\n\nassert_eq!(\"σ\", sigma.to_lowercase());\n\n// but at the end of a word, it's ς, not σ:\nlet odysseus = \"ὈΔΥΣΣΕΎΣ\";\n\nassert_eq!(\"ὀδυσσεύς\", odysseus.to_lowercase());\n```\n\nLanguages without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_lowercase());\n```",
      "id": "5:5424",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "bindings": []
                }
              },
              "id": "5:7621",
              "name": "String",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`String`": "5:7621"
      },
      "name": "to_lowercase",
      "span": null,
      "visibility": "public"
    },
    "5:5436": {
      "attrs": [
        "#[cfg(not(no_global_oom_handling))]",
        "#[must_use =\n  \"this returns the uppercase string as a new String, \\\n                  without modifying the original\"]",
        "#[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Returns the uppercase equivalent of this string slice, as a new [`String`].\n\n'Uppercase' is defined according to the terms of the Unicode Derived Core Property\n`Uppercase`.\n\nSince some characters can expand into multiple characters when changing\nthe case, this function returns a [`String`] instead of modifying the\nparameter in-place.\n\n# Examples\n\nBasic usage:\n\n```\nlet s = \"hello\";\n\nassert_eq!(\"HELLO\", s.to_uppercase());\n```\n\nScripts without case are not changed:\n\n```\nlet new_year = \"农历新年\";\n\nassert_eq!(new_year, new_year.to_uppercase());\n```\n\nOne character can become multiple:\n```\nlet s = \"tschüß\";\n\nassert_eq!(\"TSCHÜSS\", s.to_uppercase());\n```",
      "id": "5:5436",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "bindings": []
                }
              },
              "id": "5:7621",
              "name": "String",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`String`": "5:7621"
      },
      "name": "to_uppercase",
      "span": null,
      "visibility": "public"
    },
    "5:5437": {
      "attrs": [
        "#[stable(feature = \"box_str\", since = \"1.4.0\")]",
        "#[must_use = \"`self` will be dropped if the result is not used\"]",
        "#[inline]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Converts a [`Box<str>`] into a [`String`] without copying or allocating.\n\n# Examples\n\nBasic usage:\n\n```\nlet string = String::from(\"birthday gift\");\nlet boxed_str = string.clone().into_boxed_str();\n\nassert_eq!(boxed_str.into_string(), string);\n```",
      "id": "5:5437",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "args": {
                    "angle_bracketed": {
                      "args": [
                        {
                          "type": {
                            "inner": "str",
                            "kind": "primitive"
                          }
                        },
                        {
                          "type": {
                            "inner": {
                              "args": {
                                "angle_bracketed": {
                                  "args": [],
                                  "bindings": []
                                }
                              },
                              "id": "5:7404",
                              "name": "Global",
                              "param_names": []
                            },
                            "kind": "resolved_path"
                          }
                        }
                      ],
                      "bindings": []
                    }
                  },
                  "id": "5:313",
                  "name": "Box",
                  "param_names": []
                },
                "kind": "resolved_path"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "bindings": []
                }
              },
              "id": "5:7621",
              "name": "String",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`Box<str>`": "5:313",
        "`String`": "5:7621"
      },
      "name": "into_string",
      "span": null,
      "visibility": "public"
    },
    "5:5438": {
      "attrs": [
        "#[cfg(not(no_global_oom_handling))]",
        "#[must_use]",
        "#[stable(feature = \"repeat_str\", since = \"1.16.0\")]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Creates a new [`String`] by repeating a string `n` times.\n\n# Panics\n\nThis function will panic if the capacity would overflow.\n\n# Examples\n\nBasic usage:\n\n```\nassert_eq!(\"abc\".repeat(4), String::from(\"abcabcabcabc\"));\n```\n\nA panic upon overflow:\n\n```should_panic\n// this will panic at runtime\nlet huge = \"0123456789abcdef\".repeat(usize::MAX);\n```",
      "id": "5:5438",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ],
            [
              "n",
              {
                "inner": "usize",
                "kind": "primitive"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "bindings": []
                }
              },
              "id": "5:7621",
              "name": "String",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "`String`": "5:7621"
      },
      "name": "repeat",
      "span": null,
      "visibility": "public"
    },
    "5:5439": {
      "attrs": [
        "#[cfg(not(no_global_oom_handling))]",
        "#[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]",
        "#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]",
        "#[inline]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Returns a copy of this string where each character is mapped to its\nASCII upper case equivalent.\n\nASCII letters 'a' to 'z' are mapped to 'A' to 'Z',\nbut non-ASCII letters are unchanged.\n\nTo uppercase the value in-place, use [`make_ascii_uppercase`].\n\nTo uppercase ASCII characters in addition to non-ASCII characters, use\n[`to_uppercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"GRüßE, JüRGEN ❤\", s.to_ascii_uppercase());\n```\n\n[`make_ascii_uppercase`]: str::make_ascii_uppercase\n[`to_uppercase`]: #method.to_uppercase",
      "id": "5:5439",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "bindings": []
                }
              },
              "id": "5:7621",
              "name": "String",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "str::make_ascii_uppercase": "1:15326"
      },
      "name": "to_ascii_uppercase",
      "span": null,
      "visibility": "public"
    },
    "5:5440": {
      "attrs": [
        "#[cfg(not(no_global_oom_handling))]",
        "#[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]",
        "#[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]",
        "#[inline]"
      ],
      "crate_id": 5,
      "deprecation": null,
      "docs": "Returns a copy of this string where each character is mapped to its\nASCII lower case equivalent.\n\nASCII letters 'A' to 'Z' are mapped to 'a' to 'z',\nbut non-ASCII letters are unchanged.\n\nTo lowercase the value in-place, use [`make_ascii_lowercase`].\n\nTo lowercase ASCII characters in addition to non-ASCII characters, use\n[`to_lowercase`].\n\n# Examples\n\n```\nlet s = \"Grüße, Jürgen ❤\";\n\nassert_eq!(\"grüße, jürgen ❤\", s.to_ascii_lowercase());\n```\n\n[`make_ascii_lowercase`]: str::make_ascii_lowercase\n[`to_lowercase`]: #method.to_lowercase",
      "id": "5:5440",
      "inner": {
        "abi": "\"Rust\"",
        "decl": {
          "c_variadic": false,
          "inputs": [
            [
              "self",
              {
                "inner": {
                  "lifetime": null,
                  "mutable": false,
                  "type": {
                    "inner": "Self",
                    "kind": "generic"
                  }
                },
                "kind": "borrowed_ref"
              }
            ]
          ],
          "output": {
            "inner": {
              "args": {
                "angle_bracketed": {
                  "args": [],
                  "bindings": []
                }
              },
              "id": "5:7621",
              "name": "String",
              "param_names": []
            },
            "kind": "resolved_path"
          }
        },
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "has_body": true,
        "header": []
      },
      "kind": "method",
      "links": {
        "str::make_ascii_lowercase": "1:15326"
      },
      "name": "to_ascii_lowercase",
      "span": null,
      "visibility": "public"
    },
    "5:5738": {
      "attrs": [],
      "crate_id": 5,
      "deprecation": null,
      "docs": null,
      "id": "5:5738",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "5:5739"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "ToString",
      "span": null,
      "visibility": "public"
    },
    "5:661": {
      "attrs": [],
      "crate_id": 5,
      "deprecation": null,
      "docs": null,
      "id": "5:661",
      "inner": {
        "bounds": [],
        "generics": {
          "params": [],
          "where_predicates": []
        },
        "implementors": [],
        "is_auto": false,
        "is_unsafe": false,
        "items": [
          "5:662",
          "5:663",
          "5:664"
        ]
      },
      "kind": "trait",
      "links": {},
      "name": "ToOwned",
      "span": null,
      "visibility": "public"
    }
  },
  "paths": {
    "0:0": {
      "crate_id": 0,
      "kind": "module",
      "path": [
        "removal_cargo_feature_dep_new"
      ]
    },
    "10:0": {
      "crate_id": 10,
      "kind": "module",
      "path": [
        "rustc_std_workspace_alloc"
      ]
    },
    "11:0": {
      "crate_id": 11,
      "kind": "module",
      "path": [
        "rustc_demangle"
      ]
    },
    "11:11": {
      "crate_id": 11,
      "kind": "struct",
      "path": [
        "rustc_demangle",
        "legacy",
        "Demangle"
      ]
    },
    "11:189": {
      "crate_id": 11,
      "kind": "struct",
      "path": [
        "rustc_demangle",
        "Demangle"
      ]
    },
    "11:194": {
      "crate_id": 11,
      "kind": "enum",
      "path": [
        "rustc_demangle",
        "DemangleStyle"
      ]
    },
    "11:216": {
      "crate_id": 11,
      "kind": "struct",
      "path": [
        "rustc_demangle",
        "SizeLimitedFmtAdapter"
      ]
    },
    "11:231": {
      "crate_id": 11,
      "kind": "enum",
      "path": [
        "rustc_demangle",
        "v0",
        "ParseError"
      ]
    },
    "11:244": {
      "crate_id": 11,
      "kind": "struct",
      "path": [
        "rustc_demangle",
        "TryDemangleError"
      ]
    },
    "11:250": {
      "crate_id": 11,
      "kind": "struct",
      "path": [
        "rustc_demangle",
        "SizeLimitExhausted"
      ]
    },
    "11:47": {
      "crate_id": 11,
      "kind": "struct",
      "path": [
        "rustc_demangle",
        "v0",
        "Demangle"
      ]
    },
    "11:56": {
      "crate_id": 11,
      "kind": "struct",
      "path": [
        "rustc_demangle",
        "v0",
        "Ident"
      ]
    },
    "12:0": {
      "crate_id": 12,
      "kind": "module",
      "path": [
        "std_detect"
      ]
    },
    "12:117": {
      "crate_id": 12,
      "kind": "enum",
      "path": [
        "std_detect",
        "detect",
        "arch",
        "Feature"
      ]
    },
    "12:221": {
      "crate_id": 12,
      "kind": "struct",
      "path": [
        "std_detect",
        "detect",
        "cache",
        "Initializer"
      ]
    },
    "13:0": {
      "crate_id": 13,
      "kind": "module",
      "path": [
        "addr2line"
      ]
    },
    "13:230": {
      "crate_id": 13,
      "kind": "struct",
      "path": [
        "addr2line",
        "LocationRangeIter"
      ]
    },
    "13:248": {
      "crate_id": 13,
      "kind": "struct",
      "path": [
        "addr2line",
        "LocationRangeUnitIter"
      ]
    },
    "13:269": {
      "crate_id": 13,
      "kind": "struct",
      "path": [
        "addr2line",
        "RangeAttributes"
      ]
    },
    "14:0": {
      "crate_id": 14,
      "kind": "module",
      "path": [
        "gimli"
      ]
    },
    "14:2733": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "common",
        "Format"
      ]
    },
    "14:2754": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "Encoding"
      ]
    },
    "14:2773": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "LineEncoding"
      ]
    },
    "14:2794": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "Register"
      ]
    },
    "14:2816": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugAbbrevOffset"
      ]
    },
    "14:2843": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugAddrBase"
      ]
    },
    "14:2866": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugAddrIndex"
      ]
    },
    "14:2889": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugArangesOffset"
      ]
    },
    "14:2912": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugInfoOffset"
      ]
    },
    "14:2945": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugLineOffset"
      ]
    },
    "14:2968": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugLineStrOffset"
      ]
    },
    "14:2991": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "LocationListsOffset"
      ]
    },
    "14:3018": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugLocListsBase"
      ]
    },
    "14:3041": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugLocListsIndex"
      ]
    },
    "14:3064": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugMacinfoOffset"
      ]
    },
    "14:3091": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugMacroOffset"
      ]
    },
    "14:3118": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "RawRangeListsOffset"
      ]
    },
    "14:3145": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "RangeListsOffset"
      ]
    },
    "14:3172": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugRngListsBase"
      ]
    },
    "14:3195": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugRngListsIndex"
      ]
    },
    "14:3218": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugStrOffset"
      ]
    },
    "14:3241": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugStrOffsetsBase"
      ]
    },
    "14:3264": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugStrOffsetsIndex"
      ]
    },
    "14:3287": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugTypesOffset"
      ]
    },
    "14:3320": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugTypeSignature"
      ]
    },
    "14:3338": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DebugFrameOffset"
      ]
    },
    "14:3365": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "EhFrameOffset"
      ]
    },
    "14:3392": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "common",
        "UnitSectionOffset"
      ]
    },
    "14:3429": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "common",
        "SectionId"
      ]
    },
    "14:3488": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "common",
        "DwoId"
      ]
    },
    "14:3506": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "common",
        "DwarfFileType"
      ]
    },
    "14:3522": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "arch",
        "Arm"
      ]
    },
    "14:3549": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "arch",
        "X86"
      ]
    },
    "14:3604": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "arch",
        "X86_64"
      ]
    },
    "14:3714": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwUt"
      ]
    },
    "14:3772": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwCfa"
      ]
    },
    "14:3800": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwChildren"
      ]
    },
    "14:3939": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwTag"
      ]
    },
    "14:4230": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwAt"
      ]
    },
    "14:4304": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwForm"
      ]
    },
    "14:4350": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwAte"
      ]
    },
    "14:4386": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwLle"
      ]
    },
    "14:4417": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwDs"
      ]
    },
    "14:4448": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwEnd"
      ]
    },
    "14:4477": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwAccess"
      ]
    },
    "14:4506": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwVis"
      ]
    },
    "14:4535": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwVirtuality"
      ]
    },
    "14:4614": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwLang"
      ]
    },
    "14:4641": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwAddr"
      ]
    },
    "14:4671": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwId"
      ]
    },
    "14:4704": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwCc"
      ]
    },
    "14:4734": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwInl"
      ]
    },
    "14:4762": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwOrd"
      ]
    },
    "14:4790": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwDsc"
      ]
    },
    "14:4823": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwIdx"
      ]
    },
    "14:4852": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwDefaulted"
      ]
    },
    "14:4890": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwLns"
      ]
    },
    "14:4922": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwLne"
      ]
    },
    "14:4955": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwLnct"
      ]
    },
    "14:4995": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwMacro"
      ]
    },
    "14:5029": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwRle"
      ]
    },
    "14:5231": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwOp"
      ]
    },
    "14:5273": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "constants",
        "DwEhPe"
      ]
    },
    "14:5295": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "endianity",
        "RunTimeEndian"
      ]
    },
    "14:5314": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "endianity",
        "LittleEndian"
      ]
    },
    "14:5330": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "endianity",
        "BigEndian"
      ]
    },
    "14:5346": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "addr",
        "DebugAddr"
      ]
    },
    "14:5360": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "DebugFrame"
      ]
    },
    "14:5384": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "EhFrameHdr"
      ]
    },
    "14:5407": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "ParsedEhFrameHdr"
      ]
    },
    "14:5421": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "EhHdrTable"
      ]
    },
    "14:5433": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "EhFrame"
      ]
    },
    "14:5456": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "cfi",
        "CieOffsetEncoding"
      ]
    },
    "14:547": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "RegisterRuleMap"
      ]
    },
    "14:5472": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "BaseAddresses"
      ]
    },
    "14:5488": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "SectionBaseAddresses"
      ]
    },
    "14:5505": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "CfiEntriesIter"
      ]
    },
    "14:5522": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "cfi",
        "CieOrFde"
      ]
    },
    "14:5561": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "Augmentation"
      ]
    },
    "14:5580": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "AugmentationData"
      ]
    },
    "14:5595": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "CommonInformationEntry"
      ]
    },
    "14:5632": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "PartialFrameDescriptionEntry"
      ]
    },
    "14:5672": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "FrameDescriptionEntry"
      ]
    },
    "14:5707": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "UninitializedUnwindContext"
      ]
    },
    "14:5717": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "UnwindContext"
      ]
    },
    "14:5736": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "UnwindTable"
      ]
    },
    "14:5753": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "RegisterRuleIter"
      ]
    },
    "14:5766": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "UnwindTableRow"
      ]
    },
    "14:5790": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "cfi",
        "CfaRule"
      ]
    },
    "14:5815": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "cfi",
        "RegisterRule"
      ]
    },
    "14:5855": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "cfi",
        "CallFrameInstruction"
      ]
    },
    "14:5927": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "CallFrameInstructionIter"
      ]
    },
    "14:5941": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "cfi",
        "Pointer"
      ]
    },
    "14:5960": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "cfi",
        "PointerEncodingParameters"
      ]
    },
    "14:5975": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "dwarf",
        "Dwarf"
      ]
    },
    "14:5996": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "dwarf",
        "Unit"
      ]
    },
    "14:6014": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "dwarf",
        "RangeIter"
      ]
    },
    "14:6021": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "dwarf",
        "RangeIterInner"
      ]
    },
    "14:6032": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "endian_slice",
        "EndianSlice"
      ]
    },
    "14:6072": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "reader",
        "ReaderOffsetId"
      ]
    },
    "14:6087": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "abbrev",
        "DebugAbbrev"
      ]
    },
    "14:6101": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "abbrev",
        "Abbreviations"
      ]
    },
    "14:6110": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "abbrev",
        "Abbreviation"
      ]
    },
    "14:6126": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "abbrev",
        "Attributes"
      ]
    },
    "14:6136": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "abbrev",
        "AttributeSpecification"
      ]
    },
    "14:6152": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "aranges",
        "DebugAranges"
      ]
    },
    "14:6166": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "aranges",
        "ArangeHeaderIter"
      ]
    },
    "14:6176": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "aranges",
        "ArangeHeader"
      ]
    },
    "14:6208": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "aranges",
        "ArangeEntryIter"
      ]
    },
    "14:6219": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "aranges",
        "ArangeEntry"
      ]
    },
    "14:6238": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "DebugLine"
      ]
    },
    "14:6252": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "LineRows"
      ]
    },
    "14:6269": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "line",
        "LineInstruction"
      ]
    },
    "14:6357": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "LineInstructions"
      ]
    },
    "14:6366": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "LineRow"
      ]
    },
    "14:6391": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "line",
        "ColumnType"
      ]
    },
    "14:6413": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "LineSequence"
      ]
    },
    "14:6424": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "LineProgramHeader"
      ]
    },
    "14:6464": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "IncompleteLineProgram"
      ]
    },
    "14:6491": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "CompleteLineProgram"
      ]
    },
    "14:6518": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "FileEntry"
      ]
    },
    "14:6554": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "line",
        "FileEntryFormat"
      ]
    },
    "14:6569": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "lists",
        "ListsHeader"
      ]
    },
    "14:6577": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "loclists",
        "DebugLoc"
      ]
    },
    "14:6591": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "loclists",
        "DebugLocLists"
      ]
    },
    "14:6605": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "loclists",
        "LocationLists"
      ]
    },
    "14:6620": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "loclists",
        "LocListsFormat"
      ]
    },
    "14:6636": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "loclists",
        "RawLocListIter"
      ]
    },
    "14:6644": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "loclists",
        "RawLocListEntry"
      ]
    },
    "14:6682": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "loclists",
        "LocListIter"
      ]
    },
    "14:6691": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "loclists",
        "LocationListEntry"
      ]
    },
    "14:6718": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "lookup",
        "DebugLookup"
      ]
    },
    "14:6731": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "lookup",
        "LookupEntryIter"
      ]
    },
    "14:6744": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "lookup",
        "PubStuffHeader"
      ]
    },
    "14:6768": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "lookup",
        "PubStuffParser"
      ]
    },
    "14:6780": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "op",
        "DieReference"
      ]
    },
    "14:6807": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "op",
        "Operation"
      ]
    },
    "14:6949": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "op",
        "OperationEvaluationResult"
      ]
    },
    "14:6964": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "op",
        "Location"
      ]
    },
    "14:6999": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "op",
        "Piece"
      ]
    },
    "14:7024": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "op",
        "EvaluationState"
      ]
    },
    "14:7042": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "op",
        "EvaluationWaiting"
      ]
    },
    "14:7073": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "op",
        "EvaluationResult"
      ]
    },
    "14:7119": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "op",
        "Expression"
      ]
    },
    "14:7146": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "op",
        "OperationIter"
      ]
    },
    "14:7158": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "op",
        "Evaluation"
      ]
    },
    "14:7174": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "pubnames",
        "PubNamesEntry"
      ]
    },
    "14:7185": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "pubnames",
        "DebugPubNames"
      ]
    },
    "14:7195": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "pubnames",
        "PubNamesEntryIter"
      ]
    },
    "14:7205": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "pubtypes",
        "PubTypesEntry"
      ]
    },
    "14:7216": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "pubtypes",
        "DebugPubTypes"
      ]
    },
    "14:7226": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "pubtypes",
        "PubTypesEntryIter"
      ]
    },
    "14:7236": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "rnglists",
        "DebugRanges"
      ]
    },
    "14:7250": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "rnglists",
        "DebugRngLists"
      ]
    },
    "14:7264": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "rnglists",
        "RangeLists"
      ]
    },
    "14:7279": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "rnglists",
        "RangeListsFormat"
      ]
    },
    "14:7295": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "rnglists",
        "RawRngListIter"
      ]
    },
    "14:7303": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "rnglists",
        "RawRngListEntry"
      ]
    },
    "14:7333": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "rnglists",
        "RngListIter"
      ]
    },
    "14:7342": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "rnglists",
        "RawRange"
      ]
    },
    "14:7360": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "rnglists",
        "Range"
      ]
    },
    "14:7378": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "str",
        "DebugStr"
      ]
    },
    "14:7392": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "str",
        "DebugStrOffsets"
      ]
    },
    "14:7406": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "str",
        "DebugLineStr"
      ]
    },
    "14:7420": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "UnitOffset"
      ]
    },
    "14:7453": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "DebugInfo"
      ]
    },
    "14:7467": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "DebugInfoUnitHeadersIter"
      ]
    },
    "14:7477": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "unit",
        "UnitType"
      ]
    },
    "14:7514": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "UnitHeader"
      ]
    },
    "14:7549": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "DebuggingInformationEntry"
      ]
    },
    "14:7571": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "unit",
        "AttributeValue"
      ]
    },
    "14:7738": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "Attribute"
      ]
    },
    "14:7761": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "AttrsIter"
      ]
    },
    "14:7786": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "EntriesRaw"
      ]
    },
    "14:7804": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "EntriesCursor"
      ]
    },
    "14:7823": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "EntriesTree"
      ]
    },
    "14:7843": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "EntriesTreeNode"
      ]
    },
    "14:7856": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "EntriesTreeIter"
      ]
    },
    "14:7870": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "DebugTypes"
      ]
    },
    "14:7884": {
      "crate_id": 14,
      "kind": "struct",
      "path": [
        "gimli",
        "read",
        "unit",
        "DebugTypesUnitHeadersIter"
      ]
    },
    "14:7894": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "value",
        "ValueType"
      ]
    },
    "14:7928": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "value",
        "Value"
      ]
    },
    "14:7971": {
      "crate_id": 14,
      "kind": "enum",
      "path": [
        "gimli",
        "read",
        "Error"
      ]
    },
    "15:0": {
      "crate_id": 15,
      "kind": "module",
      "path": [
        "object"
      ]
    },
    "15:10001": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "archive",
        "ArchiveKind"
      ]
    },
    "15:10028": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "archive",
        "ArchiveFile"
      ]
    },
    "15:10041": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "archive",
        "ArchiveMemberIterator"
      ]
    },
    "15:10052": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "archive",
        "ArchiveMember"
      ]
    },
    "15:10061": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "file",
        "CoffCommon"
      ]
    },
    "15:10071": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "file",
        "CoffFile"
      ]
    },
    "15:10081": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "section",
        "SectionTable"
      ]
    },
    "15:10095": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "section",
        "CoffSegmentIterator"
      ]
    },
    "15:10106": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "section",
        "CoffSegment"
      ]
    },
    "15:10117": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "section",
        "CoffSectionIterator"
      ]
    },
    "15:10128": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "section",
        "CoffSection"
      ]
    },
    "15:10140": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "symbol",
        "SymbolTable"
      ]
    },
    "15:10149": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "symbol",
        "SymbolIterator"
      ]
    },
    "15:10160": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "symbol",
        "CoffSymbolTable"
      ]
    },
    "15:10179": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "symbol",
        "CoffSymbol"
      ]
    },
    "15:10200": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "comdat",
        "CoffComdatIterator"
      ]
    },
    "15:10211": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "comdat",
        "CoffComdat"
      ]
    },
    "15:10224": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "comdat",
        "CoffComdatSectionIterator"
      ]
    },
    "15:10236": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "file",
        "ElfFile"
      ]
    },
    "15:10253": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "segment",
        "ElfSegmentIterator"
      ]
    },
    "15:10266": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "segment",
        "ElfSegment"
      ]
    },
    "15:10279": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "section",
        "SectionTable"
      ]
    },
    "15:10304": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "section",
        "ElfSectionIterator"
      ]
    },
    "15:10317": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "section",
        "ElfSection"
      ]
    },
    "15:10331": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "symbol",
        "SymbolTable"
      ]
    },
    "15:10353": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "symbol",
        "ElfSymbolTable"
      ]
    },
    "15:10377": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "symbol",
        "ElfSymbol"
      ]
    },
    "15:10403": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "relocation",
        "RelocationSections"
      ]
    },
    "15:10407": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "comdat",
        "ElfComdatIterator"
      ]
    },
    "15:10420": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "comdat",
        "ElfComdat"
      ]
    },
    "15:10435": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "comdat",
        "ElfComdatSectionIterator"
      ]
    },
    "15:10448": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "note",
        "NoteIterator"
      ]
    },
    "15:10458": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "note",
        "Note"
      ]
    },
    "15:10468": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "hash",
        "HashTable"
      ]
    },
    "15:10477": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "hash",
        "GnuHashTable"
      ]
    },
    "15:10489": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "version",
        "VerdefIterator"
      ]
    },
    "15:10502": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "version",
        "VerdauxIterator"
      ]
    },
    "15:10516": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "version",
        "VerneedIterator"
      ]
    },
    "15:10529": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "version",
        "VernauxIterator"
      ]
    },
    "15:10543": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "dyld_cache",
        "DyldCache"
      ]
    },
    "15:10558": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "dyld_cache",
        "DyldCacheImageIterator"
      ]
    },
    "15:10571": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "dyld_cache",
        "DyldCacheImage"
      ]
    },
    "15:10584": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "file",
        "MachOFile"
      ]
    },
    "15:10599": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "file",
        "MachOComdatIterator"
      ]
    },
    "15:10611": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "file",
        "MachOComdat"
      ]
    },
    "15:10623": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "file",
        "MachOComdatSectionIterator"
      ]
    },
    "15:10635": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "load_command",
        "LoadCommandIterator"
      ]
    },
    "15:10656": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "load_command",
        "LoadCommandData"
      ]
    },
    "15:10673": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "macho",
        "load_command",
        "LoadCommandVariant"
      ]
    },
    "15:10788": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "segment",
        "MachOSegmentIterator"
      ]
    },
    "15:10801": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "segment",
        "MachOSegment"
      ]
    },
    "15:10814": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "section",
        "MachOSection"
      ]
    },
    "15:10827": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "section",
        "MachOSectionInternal"
      ]
    },
    "15:10844": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "symbol",
        "SymbolTable"
      ]
    },
    "15:10864": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "symbol",
        "MachOSymbolTable"
      ]
    },
    "15:10887": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "symbol",
        "MachOSymbol"
      ]
    },
    "15:10912": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "pe",
        "file",
        "PeFile"
      ]
    },
    "15:10926": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "pe",
        "file",
        "PeComdatIterator"
      ]
    },
    "15:10938": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "pe",
        "file",
        "PeComdat"
      ]
    },
    "15:10950": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "pe",
        "file",
        "PeComdatSectionIterator"
      ]
    },
    "15:10962": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "pe",
        "section",
        "PeSegmentIterator"
      ]
    },
    "15:10975": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "pe",
        "section",
        "PeSegment"
      ]
    },
    "15:10988": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "pe",
        "section",
        "PeSectionIterator"
      ]
    },
    "15:11001": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "pe",
        "section",
        "PeSection"
      ]
    },
    "15:11015": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "pe",
        "section",
        "PeRelocationIterator"
      ]
    },
    "15:11026": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "traits",
        "NoDynamicRelocationIterator"
      ]
    },
    "15:11030": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "Error"
      ]
    },
    "15:11045": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "FileKind"
      ]
    },
    "15:11082": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "SectionIndex"
      ]
    },
    "15:11100": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "SymbolIndex"
      ]
    },
    "15:11118": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "SymbolSection"
      ]
    },
    "15:11147": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "SymbolMap"
      ]
    },
    "15:11159": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "SymbolMapName"
      ]
    },
    "15:11186": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "ObjectMap"
      ]
    },
    "15:11199": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "ObjectMapEntry"
      ]
    },
    "15:11231": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "Import"
      ]
    },
    "15:11254": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "Export"
      ]
    },
    "15:11277": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "CodeView"
      ]
    },
    "15:11304": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "RelocationTarget"
      ]
    },
    "15:11328": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "Relocation"
      ]
    },
    "15:11337": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "CompressionFormat"
      ]
    },
    "15:11358": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "CompressedFileRange"
      ]
    },
    "15:11378": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "CompressedData"
      ]
    },
    "15:11406": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "archive",
        "Header"
      ]
    },
    "15:11434": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "FileHeader32"
      ]
    },
    "15:11458": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "FileHeader64"
      ]
    },
    "15:11482": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Ident"
      ]
    },
    "15:11499": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "SectionHeader32"
      ]
    },
    "15:11519": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "SectionHeader64"
      ]
    },
    "15:11539": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "CompressionHeader32"
      ]
    },
    "15:11555": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "CompressionHeader64"
      ]
    },
    "15:11572": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Sym32"
      ]
    },
    "15:11588": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Sym64"
      ]
    },
    "15:11604": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Syminfo32"
      ]
    },
    "15:11616": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Syminfo64"
      ]
    },
    "15:11628": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Rel32"
      ]
    },
    "15:11640": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Rela32"
      ]
    },
    "15:11653": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Rel64"
      ]
    },
    "15:11665": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Rela64"
      ]
    },
    "15:11678": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "ProgramHeader32"
      ]
    },
    "15:11696": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "ProgramHeader64"
      ]
    },
    "15:11714": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Dyn32"
      ]
    },
    "15:11726": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Dyn64"
      ]
    },
    "15:11738": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Versym"
      ]
    },
    "15:11750": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Verdef"
      ]
    },
    "15:11767": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Verdaux"
      ]
    },
    "15:11779": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Verneed"
      ]
    },
    "15:11794": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "Vernaux"
      ]
    },
    "15:11809": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "NoteHeader32"
      ]
    },
    "15:11822": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "NoteHeader64"
      ]
    },
    "15:11835": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "HashHeader"
      ]
    },
    "15:11847": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "elf",
        "GnuHashHeader"
      ]
    },
    "15:11915": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DyldCacheHeader"
      ]
    },
    "15:11932": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DyldCacheMappingInfo"
      ]
    },
    "15:11947": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DyldCacheImageInfo"
      ]
    },
    "15:11962": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "FatHeader"
      ]
    },
    "15:11970": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "FatArch32"
      ]
    },
    "15:11981": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "FatArch64"
      ]
    },
    "15:11993": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "MachHeader32"
      ]
    },
    "15:12010": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "MachHeader64"
      ]
    },
    "15:12028": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "LoadCommand"
      ]
    },
    "15:12040": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "LcStr"
      ]
    },
    "15:12051": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "SegmentCommand32"
      ]
    },
    "15:12073": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "SegmentCommand64"
      ]
    },
    "15:12095": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "Section32"
      ]
    },
    "15:12118": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "Section64"
      ]
    },
    "15:12142": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "Fvmlib"
      ]
    },
    "15:12155": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "FvmlibCommand"
      ]
    },
    "15:12168": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "Dylib"
      ]
    },
    "15:12182": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DylibCommand"
      ]
    },
    "15:12195": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "SubFrameworkCommand"
      ]
    },
    "15:12208": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "SubClientCommand"
      ]
    },
    "15:12221": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "SubUmbrellaCommand"
      ]
    },
    "15:12234": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "SubLibraryCommand"
      ]
    },
    "15:12247": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "PreboundDylibCommand"
      ]
    },
    "15:12262": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DylinkerCommand"
      ]
    },
    "15:12275": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "ThreadCommand"
      ]
    },
    "15:12287": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "RoutinesCommand32"
      ]
    },
    "15:12307": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "RoutinesCommand64"
      ]
    },
    "15:12327": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "SymtabCommand"
      ]
    },
    "15:12343": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DysymtabCommand"
      ]
    },
    "15:1236": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "symbol",
        "CoffSymbolIterator"
      ]
    },
    "15:12373": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DylibTableOfContents"
      ]
    },
    "15:12385": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DylibModule32"
      ]
    },
    "15:12408": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DylibModule64"
      ]
    },
    "15:12431": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DylibReference"
      ]
    },
    "15:12442": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "TwolevelHintsCommand"
      ]
    },
    "15:12456": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "TwolevelHint"
      ]
    },
    "15:12467": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "PrebindCksumCommand"
      ]
    },
    "15:12480": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "UuidCommand"
      ]
    },
    "15:12494": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "RpathCommand"
      ]
    },
    "15:12507": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "LinkeditDataCommand"
      ]
    },
    "15:12521": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "FilesetEntryCommand"
      ]
    },
    "15:12537": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "EncryptionInfoCommand32"
      ]
    },
    "15:12552": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "EncryptionInfoCommand64"
      ]
    },
    "15:12568": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "VersionMinCommand"
      ]
    },
    "15:12582": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "BuildVersionCommand"
      ]
    },
    "15:12598": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "BuildToolVersion"
      ]
    },
    "15:12610": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DyldInfoCommand"
      ]
    },
    "15:12632": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "LinkerOptionCommand"
      ]
    },
    "15:12645": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "SymsegCommand"
      ]
    },
    "15:12659": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "IdentCommand"
      ]
    },
    "15:12671": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "FvmfileCommand"
      ]
    },
    "15:12685": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "EntryPointCommand"
      ]
    },
    "15:12699": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "SourceVersionCommand"
      ]
    },
    "15:12712": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "DataInCodeEntry"
      ]
    },
    "15:12725": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "NoteCommand"
      ]
    },
    "15:12741": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "Nlist32"
      ]
    },
    "15:12756": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "Nlist64"
      ]
    },
    "15:12771": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "Relocation"
      ]
    },
    "15:12783": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "RelocationInfo"
      ]
    },
    "15:12795": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "macho",
        "ScatteredRelocationInfo"
      ]
    },
    "15:12917": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDosHeader"
      ]
    },
    "15:12946": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageOs2Header"
      ]
    },
    "15:12982": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageVxdHeader"
      ]
    },
    "15:13041": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageFileHeader"
      ]
    },
    "15:13054": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDataDirectory"
      ]
    },
    "15:13062": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageOptionalHeader32"
      ]
    },
    "15:13098": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageRomOptionalHeader"
      ]
    },
    "15:1311": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "coff",
        "relocation",
        "CoffRelocationIterator"
      ]
    },
    "15:13119": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageOptionalHeader64"
      ]
    },
    "15:13154": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageNtHeaders64"
      ]
    },
    "15:13163": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageNtHeaders32"
      ]
    },
    "15:13172": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageRomHeaders"
      ]
    },
    "15:13180": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "Guid"
      ]
    },
    "15:13192": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "AnonObjectHeader"
      ]
    },
    "15:13205": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "AnonObjectHeaderV2"
      ]
    },
    "15:13221": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "AnonObjectHeaderBigobj"
      ]
    },
    "15:13240": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageSectionHeader"
      ]
    },
    "15:13258": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageSymbol"
      ]
    },
    "15:13272": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageSymbolBytes"
      ]
    },
    "15:13282": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageSymbolEx"
      ]
    },
    "15:13296": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageSymbolExBytes"
      ]
    },
    "15:13306": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageAuxSymbolTokenDef"
      ]
    },
    "15:13318": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageAuxSymbolFunction"
      ]
    },
    "15:13331": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageAuxSymbolFunctionBeginEnd"
      ]
    },
    "15:13348": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageAuxSymbolWeak"
      ]
    },
    "15:13356": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageAuxSymbolSection"
      ]
    },
    "15:13370": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageAuxSymbolCrc"
      ]
    },
    "15:13377": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageRelocation"
      ]
    },
    "15:13386": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageLinenumber"
      ]
    },
    "15:13394": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageBaseRelocation"
      ]
    },
    "15:13402": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageArchiveMemberHeader"
      ]
    },
    "15:13429": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageExportDirectory"
      ]
    },
    "15:13446": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageImportByName"
      ]
    },
    "15:13453": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageTlsDirectory64"
      ]
    },
    "15:13465": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageTlsDirectory32"
      ]
    },
    "15:13477": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageImportDescriptor"
      ]
    },
    "15:13488": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageBoundImportDescriptor"
      ]
    },
    "15:13497": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageBoundForwarderRef"
      ]
    },
    "15:13506": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDelayloadDescriptor"
      ]
    },
    "15:13520": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageResourceDirectory"
      ]
    },
    "15:13532": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageResourceDirectoryEntry"
      ]
    },
    "15:13540": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageResourceDirectoryString"
      ]
    },
    "15:13547": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageResourceDirStringU"
      ]
    },
    "15:13554": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageResourceDataEntry"
      ]
    },
    "15:13564": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageLoadConfigCodeIntegrity"
      ]
    },
    "15:13574": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDynamicRelocationTable"
      ]
    },
    "15:13582": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDynamicRelocation32"
      ]
    },
    "15:13590": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDynamicRelocation64"
      ]
    },
    "15:13598": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDynamicRelocation32V2"
      ]
    },
    "15:13609": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDynamicRelocation64V2"
      ]
    },
    "15:13620": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImagePrologueDynamicRelocationHeader"
      ]
    },
    "15:13627": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageEpilogueDynamicRelocationHeader"
      ]
    },
    "15:13637": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageLoadConfigDirectory32"
      ]
    },
    "15:13685": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageLoadConfigDirectory64"
      ]
    },
    "15:13733": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageHotPatchInfo"
      ]
    },
    "15:13746": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageHotPatchBase"
      ]
    },
    "15:13760": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageHotPatchHashes"
      ]
    },
    "15:13772": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageArmRuntimeFunctionEntry"
      ]
    },
    "15:13780": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageArm64RuntimeFunctionEntry"
      ]
    },
    "15:13788": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageAlpha64RuntimeFunctionEntry"
      ]
    },
    "15:13799": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageAlphaRuntimeFunctionEntry"
      ]
    },
    "15:13810": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageRuntimeFunctionEntry"
      ]
    },
    "15:13819": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageEnclaveConfig32"
      ]
    },
    "15:13842": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageEnclaveConfig64"
      ]
    },
    "15:13865": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageEnclaveImport"
      ]
    },
    "15:13884": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDebugDirectory"
      ]
    },
    "15:13898": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageCoffSymbolsHeader"
      ]
    },
    "15:13912": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageDebugMisc"
      ]
    },
    "15:13924": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageFunctionEntry"
      ]
    },
    "15:13933": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageFunctionEntry64"
      ]
    },
    "15:13942": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageSeparateDebugHeader"
      ]
    },
    "15:13963": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "NonPagedDebugInfo"
      ]
    },
    "15:13978": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageArchitectureEntry"
      ]
    },
    "15:13986": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImportObjectHeader"
      ]
    },
    "15:14000": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "pe",
        "ImageCor20Header"
      ]
    },
    "15:2314": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "symbol",
        "ElfSymbolIterator"
      ]
    },
    "15:2484": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "elf",
        "relocation",
        "ElfRelaIterator"
      ]
    },
    "15:2512": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "relocation",
        "ElfDynamicRelocationIterator"
      ]
    },
    "15:2543": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "elf",
        "relocation",
        "ElfSectionRelocationIterator"
      ]
    },
    "15:294": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "util",
        "DebugByte"
      ]
    },
    "15:299": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "util",
        "DebugLen"
      ]
    },
    "15:3743": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "section",
        "MachOSectionIterator"
      ]
    },
    "15:4008": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "symbol",
        "MachOSymbolIterator"
      ]
    },
    "15:4157": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "macho",
        "relocation",
        "MachORelocationIterator"
      ]
    },
    "15:510": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "Segment"
      ]
    },
    "15:542": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "Section"
      ]
    },
    "15:607": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "Comdat"
      ]
    },
    "15:681": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "Symbol"
      ]
    },
    "15:8849": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "Architecture"
      ]
    },
    "15:8902": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "AddressSize"
      ]
    },
    "15:8929": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "BinaryFormat"
      ]
    },
    "15:8954": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "SectionKind"
      ]
    },
    "15:9005": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "ComdatKind"
      ]
    },
    "15:9034": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "SymbolKind"
      ]
    },
    "15:9065": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "SymbolScope"
      ]
    },
    "15:9088": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "RelocationKind"
      ]
    },
    "15:9133": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "RelocationEncoding"
      ]
    },
    "15:9162": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "FileFlags"
      ]
    },
    "15:9186": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "SectionFlags"
      ]
    },
    "15:9210": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "common",
        "SymbolFlags"
      ]
    },
    "15:9245": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "endian",
        "Endianness"
      ]
    },
    "15:9264": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "endian",
        "LittleEndian"
      ]
    },
    "15:9280": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "endian",
        "BigEndian"
      ]
    },
    "15:9296": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "endian",
        "U16Bytes"
      ]
    },
    "15:9332": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "endian",
        "U32Bytes"
      ]
    },
    "15:9368": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "endian",
        "U64Bytes"
      ]
    },
    "15:9404": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "endian",
        "I16Bytes"
      ]
    },
    "15:9440": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "endian",
        "I32Bytes"
      ]
    },
    "15:9476": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "endian",
        "I64Bytes"
      ]
    },
    "15:9528": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "util",
        "Bytes"
      ]
    },
    "15:9551": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "util",
        "ByteString"
      ]
    },
    "15:9574": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "util",
        "StringTable"
      ]
    },
    "15:9592": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "File"
      ]
    },
    "15:9600": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "FileInternal"
      ]
    },
    "15:9649": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "SegmentIterator"
      ]
    },
    "15:9659": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "SegmentIteratorInternal"
      ]
    },
    "15:9689": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "SegmentInternal"
      ]
    },
    "15:9719": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "SectionIterator"
      ]
    },
    "15:9729": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "SectionIteratorInternal"
      ]
    },
    "15:9759": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "ComdatIterator"
      ]
    },
    "15:9769": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "ComdatIteratorInternal"
      ]
    },
    "15:9799": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "ComdatSectionIterator"
      ]
    },
    "15:9809": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "ComdatSectionIteratorInternal"
      ]
    },
    "15:9839": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "SymbolTable"
      ]
    },
    "15:9849": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "SymbolTableInternal"
      ]
    },
    "15:9886": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "SymbolIterator"
      ]
    },
    "15:9896": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "SymbolIteratorInternal"
      ]
    },
    "15:9933": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "DynamicRelocationIterator"
      ]
    },
    "15:9943": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "DynamicRelocationIteratorInternal"
      ]
    },
    "15:9961": {
      "crate_id": 15,
      "kind": "struct",
      "path": [
        "object",
        "read",
        "any",
        "SectionRelocationIterator"
      ]
    },
    "15:9971": {
      "crate_id": 15,
      "kind": "enum",
      "path": [
        "object",
        "read",
        "any",
        "SectionRelocationIteratorInternal"
      ]
    },
    "16:0": {
      "crate_id": 16,
      "kind": "module",
      "path": [
        "memchr"
      ]
    },
    "16:136": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memchr",
        "iter",
        "Memchr"
      ]
    },
    "16:152": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memchr",
        "iter",
        "Memchr2"
      ]
    },
    "16:169": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memchr",
        "iter",
        "Memchr3"
      ]
    },
    "16:610": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "cow",
        "CowBytes"
      ]
    },
    "16:620": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "cow",
        "Imp"
      ]
    },
    "16:636": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "genericsimd",
        "Forward"
      ]
    },
    "16:644": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "prefilter",
        "PrefilterFn"
      ]
    },
    "16:650": {
      "crate_id": 16,
      "kind": "enum",
      "path": [
        "memchr",
        "memmem",
        "prefilter",
        "Prefilter"
      ]
    },
    "16:660": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "prefilter",
        "PrefilterState"
      ]
    },
    "16:667": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "rabinkarp",
        "NeedleHash"
      ]
    },
    "16:677": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "rabinkarp",
        "Hash"
      ]
    },
    "16:694": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "rarebytes",
        "RareNeedleBytes"
      ]
    },
    "16:704": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "twoway",
        "Forward"
      ]
    },
    "16:712": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "twoway",
        "Reverse"
      ]
    },
    "16:720": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "twoway",
        "TwoWay"
      ]
    },
    "16:729": {
      "crate_id": 16,
      "kind": "enum",
      "path": [
        "memchr",
        "memmem",
        "twoway",
        "Shift"
      ]
    },
    "16:739": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "twoway",
        "Suffix"
      ]
    },
    "16:744": {
      "crate_id": 16,
      "kind": "enum",
      "path": [
        "memchr",
        "memmem",
        "twoway",
        "SuffixKind"
      ]
    },
    "16:754": {
      "crate_id": 16,
      "kind": "enum",
      "path": [
        "memchr",
        "memmem",
        "twoway",
        "SuffixOrdering"
      ]
    },
    "16:766": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "twoway",
        "ApproximateByteSet"
      ]
    },
    "16:774": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "x86",
        "avx",
        "nostd",
        "Forward"
      ]
    },
    "16:782": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "x86",
        "sse",
        "Forward"
      ]
    },
    "16:790": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "FindIter"
      ]
    },
    "16:801": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "FindRevIter"
      ]
    },
    "16:811": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "Finder"
      ]
    },
    "16:820": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "FinderRev"
      ]
    },
    "16:829": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "FinderBuilder"
      ]
    },
    "16:837": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "Searcher"
      ]
    },
    "16:849": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "NeedleInfo"
      ]
    },
    "16:857": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "SearcherConfig"
      ]
    },
    "16:866": {
      "crate_id": 16,
      "kind": "enum",
      "path": [
        "memchr",
        "memmem",
        "SearcherKind"
      ]
    },
    "16:885": {
      "crate_id": 16,
      "kind": "struct",
      "path": [
        "memchr",
        "memmem",
        "SearcherRev"
      ]
    },
    "16:896": {
      "crate_id": 16,
      "kind": "enum",
      "path": [
        "memchr",
        "memmem",
        "SearcherRevKind"
      ]
    },
    "17:0": {
      "crate_id": 17,
      "kind": "module",
      "path": [
        "miniz_oxide"
      ]
    },
    "17:1020": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "MZError"
      ]
    },
    "17:1056": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "DataFormat"
      ]
    },
    "17:1075": {
      "crate_id": 17,
      "kind": "struct",
      "path": [
        "miniz_oxide",
        "StreamResult"
      ]
    },
    "17:157": {
      "crate_id": 17,
      "kind": "struct",
      "path": [
        "miniz_oxide",
        "deflate",
        "core",
        "CompressorOxide"
      ]
    },
    "17:234": {
      "crate_id": 17,
      "kind": "struct",
      "path": [
        "miniz_oxide",
        "deflate",
        "core",
        "HuffmanOxide"
      ]
    },
    "17:27": {
      "crate_id": 17,
      "kind": "struct",
      "path": [
        "miniz_oxide",
        "deflate",
        "buffer",
        "HashBuffers"
      ]
    },
    "17:41": {
      "crate_id": 17,
      "kind": "struct",
      "path": [
        "miniz_oxide",
        "deflate",
        "buffer",
        "LocalBuf"
      ]
    },
    "17:469": {
      "crate_id": 17,
      "kind": "struct",
      "path": [
        "miniz_oxide",
        "inflate",
        "core",
        "DecompressorOxide"
      ]
    },
    "17:603": {
      "crate_id": 17,
      "kind": "struct",
      "path": [
        "miniz_oxide",
        "inflate",
        "stream",
        "InflateState"
      ]
    },
    "17:686": {
      "crate_id": 17,
      "kind": "struct",
      "path": [
        "miniz_oxide",
        "deflate",
        "core",
        "SymFreq"
      ]
    },
    "17:692": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "deflate",
        "core",
        "CompressionStrategy"
      ]
    },
    "17:722": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "deflate",
        "core",
        "TDEFLFlush"
      ]
    },
    "17:749": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "deflate",
        "core",
        "TDEFLStatus"
      ]
    },
    "17:776": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "deflate",
        "CompressionLevel"
      ]
    },
    "17:809": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "inflate",
        "core",
        "State"
      ]
    },
    "17:900": {
      "crate_id": 17,
      "kind": "struct",
      "path": [
        "miniz_oxide",
        "inflate",
        "core",
        "LocalVars"
      ]
    },
    "17:927": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "inflate",
        "TINFLStatus"
      ]
    },
    "17:963": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "MZFlush"
      ]
    },
    "17:996": {
      "crate_id": 17,
      "kind": "enum",
      "path": [
        "miniz_oxide",
        "MZStatus"
      ]
    },
    "18:0": {
      "crate_id": 18,
      "kind": "module",
      "path": [
        "adler"
      ]
    },
    "18:46": {
      "crate_id": 18,
      "kind": "struct",
      "path": [
        "adler",
        "algo",
        "U32X4"
      ]
    },
    "18:54": {
      "crate_id": 18,
      "kind": "struct",
      "path": [
        "adler",
        "Adler32"
      ]
    },
    "19:0": {
      "crate_id": 19,
      "kind": "module",
      "path": [
        "panic_unwind"
      ]
    },
    "19:117": {
      "crate_id": 19,
      "kind": "struct",
      "path": [
        "panic_unwind",
        "dwarf",
        "eh",
        "EHContext"
      ]
    },
    "1:0": {
      "crate_id": 1,
      "kind": "module",
      "path": [
        "std"
      ]
    },
    "1:10007": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace_rs",
        "symbolize",
        "SymbolName"
      ]
    },
    "1:10057": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace_rs",
        "print",
        "BacktraceFrameFmt"
      ]
    },
    "1:10082": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace_rs",
        "Bomb"
      ]
    },
    "1:10221": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "sealed",
        "Sealed"
      ]
    },
    "1:10222": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "thread",
        "local",
        "AccessError"
      ]
    },
    "1:10233": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "thread",
        "local",
        "fast",
        "DtorState"
      ]
    },
    "1:10243": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "thread",
        "Builder"
      ]
    },
    "1:10248": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "thread",
        "ThreadId"
      ]
    },
    "1:10266": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "thread",
        "Thread"
      ]
    },
    "1:10294": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "backtrace",
        "BacktraceStatus"
      ]
    },
    "1:10309": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "backtrace",
        "RawFrame"
      ]
    },
    "1:10315": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "RandomState"
      ]
    },
    "1:10324": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "DefaultHasher"
      ]
    },
    "1:10331": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "env",
        "VarError"
      ]
    },
    "1:10348": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "env",
        "JoinPathsError"
      ]
    },
    "1:10352": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "error",
        "private",
        "Internal"
      ]
    },
    "1:10356": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "error",
        "Chain"
      ]
    },
    "1:10365": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "ffi",
        "c_str",
        "CString"
      ]
    },
    "1:10383": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "ffi",
        "c_str",
        "CStr"
      ]
    },
    "1:10388": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "ffi",
        "c_str",
        "NulError"
      ]
    },
    "1:10403": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "ffi",
        "c_str",
        "FromBytesWithNulError"
      ]
    },
    "1:10416": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "ffi",
        "c_str",
        "FromVecWithNulError"
      ]
    },
    "1:10430": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "ffi",
        "c_str",
        "FromBytesWithNulErrorKind"
      ]
    },
    "1:10447": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "ffi",
        "c_str",
        "IntoStringError"
      ]
    },
    "1:10541": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "fs",
        "Metadata"
      ]
    },
    "1:10546": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "fs",
        "ReadDir"
      ]
    },
    "1:10551": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "fs",
        "OpenOptions"
      ]
    },
    "1:10558": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "fs",
        "Permissions"
      ]
    },
    "1:10572": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "fs",
        "FileType"
      ]
    },
    "1:10590": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "fs",
        "DirBuilder"
      ]
    },
    "1:10595": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "buffered",
        "linewritershim",
        "LineWriterShim"
      ]
    },
    "1:10603": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "buffered",
        "IntoInnerError"
      ]
    },
    "1:10611": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "cursor",
        "Cursor"
      ]
    },
    "1:10632": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "error",
        "Custom"
      ]
    },
    "1:10637": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "io",
        "error",
        "ErrorKind"
      ]
    },
    "1:10742": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "util",
        "Empty"
      ]
    },
    "1:10749": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "util",
        "Sink"
      ]
    },
    "1:10756": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "IoSlice"
      ]
    },
    "1:10765": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "io",
        "SeekFrom"
      ]
    },
    "1:10787": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "Chain"
      ]
    },
    "1:10797": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "Take"
      ]
    },
    "1:10804": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "Bytes"
      ]
    },
    "1:10810": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "Split"
      ]
    },
    "1:10817": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "Lines"
      ]
    },
    "1:10823": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "net",
        "addr",
        "SocketAddr"
      ]
    },
    "1:10847": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "addr",
        "SocketAddrV4"
      ]
    },
    "1:10850": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "addr",
        "SocketAddrV6"
      ]
    },
    "1:10853": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "net",
        "ip",
        "IpAddr"
      ]
    },
    "1:10877": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "ip",
        "Ipv4Addr"
      ]
    },
    "1:1088": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "HashMap"
      ]
    },
    "1:10880": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "ip",
        "Ipv6Addr"
      ]
    },
    "1:10883": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "net",
        "ip",
        "Ipv6MulticastScope"
      ]
    },
    "1:10912": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "ip",
        "{{impl}}",
        "fmt",
        "Span"
      ]
    },
    "1:10932": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "parser",
        "AddrParseError"
      ]
    },
    "1:10946": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "tcp",
        "Incoming"
      ]
    },
    "1:10952": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "tcp",
        "IntoIncoming"
      ]
    },
    "1:10956": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "net",
        "Shutdown"
      ]
    },
    "1:10998": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "addr",
        "SocketAddr"
      ]
    },
    "1:11003": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "ancillary",
        "SocketCred"
      ]
    },
    "1:11008": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "ancillary",
        "AncillaryError"
      ]
    },
    "1:11014": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "ancillary",
        "SocketAncillary"
      ]
    },
    "1:11022": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "listener",
        "Incoming"
      ]
    },
    "1:11028": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "ucred",
        "UCred"
      ]
    },
    "1:11047": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "linux",
        "process",
        "PidFd"
      ]
    },
    "1:11051": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "linux",
        "raw",
        "arch",
        "stat"
      ]
    },
    "1:11073": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "fd",
        "owned",
        "BorrowedFd"
      ]
    },
    "1:11100": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "path",
        "Prefix"
      ]
    },
    "1:11151": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "path",
        "State"
      ]
    },
    "1:11174": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "PrefixComponent"
      ]
    },
    "1:11191": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "path",
        "Component"
      ]
    },
    "1:11234": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "Components"
      ]
    },
    "1:11244": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "Iter"
      ]
    },
    "1:11250": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "Ancestors"
      ]
    },
    "1:11261": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "StripPrefixError"
      ]
    },
    "1:11579": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "CommandArgs"
      ]
    },
    "1:11585": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "Output"
      ]
    },
    "1:11598": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "ExitStatus"
      ]
    },
    "1:11613": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "ExitStatusError"
      ]
    },
    "1:11628": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "ExitCode"
      ]
    },
    "1:11636": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "blocking",
        "SignalToken"
      ]
    },
    "1:11640": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "sync",
        "mpsc",
        "shared",
        "StartResult"
      ]
    },
    "1:11651": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "sync",
        "mpsc",
        "sync",
        "Failure"
      ]
    },
    "1:11658": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "cache_aligned",
        "CacheAligned"
      ]
    },
    "1:11691": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "Iter"
      ]
    },
    "1:11699": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "TryIter"
      ]
    },
    "1:11707": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "IntoIter"
      ]
    },
    "1:11713": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "SendError"
      ]
    },
    "1:11733": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "RecvError"
      ]
    },
    "1:11746": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "sync",
        "mpsc",
        "TryRecvError"
      ]
    },
    "1:11762": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "sync",
        "mpsc",
        "RecvTimeoutError"
      ]
    },
    "1:11778": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "sync",
        "mpsc",
        "TrySendError"
      ]
    },
    "1:11802": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "condvar",
        "WaitTimeoutResult"
      ]
    },
    "1:11817": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "once",
        "OnceState"
      ]
    },
    "1:11822": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "time",
        "Instant"
      ]
    },
    "1:11842": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "time",
        "SystemTime"
      ]
    },
    "1:11862": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "time",
        "SystemTimeError"
      ]
    },
    "1:1191": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "Iter"
      ]
    },
    "1:11962": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "args",
        "Args"
      ]
    },
    "1:1204": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "IterMut"
      ]
    },
    "1:12052": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "condvar",
        "Condvar"
      ]
    },
    "1:1214": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "IntoIter"
      ]
    },
    "1:1222": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "Keys"
      ]
    },
    "1:12337": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fs",
        "File"
      ]
    },
    "1:12344": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fs",
        "ReadDir"
      ]
    },
    "1:12347": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fs",
        "Dir"
      ]
    },
    "1:1235": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "Values"
      ]
    },
    "1:1248": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "Drain"
      ]
    },
    "1:1258": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "DrainFilter"
      ]
    },
    "1:1264": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "ValuesMut"
      ]
    },
    "1:1269": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "IntoKeys"
      ]
    },
    "1:1273": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "IntoValues"
      ]
    },
    "1:1277": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "RawEntryBuilderMut"
      ]
    },
    "1:12829": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "mutex",
        "Mutex"
      ]
    },
    "1:1283": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "RawEntryMut"
      ]
    },
    "1:12842": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "mutex",
        "ReentrantMutex"
      ]
    },
    "1:12853": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "mutex",
        "PthreadMutexAttr"
      ]
    },
    "1:1294": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "RawOccupiedEntryMut"
      ]
    },
    "1:12966": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "net",
        "Socket"
      ]
    },
    "1:1300": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "RawVacantEntryMut"
      ]
    },
    "1:1306": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "RawEntryBuilder"
      ]
    },
    "1:13111": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "os",
        "SplitPaths"
      ]
    },
    "1:13130": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "os",
        "Env"
      ]
    },
    "1:13199": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "os_str",
        "Slice"
      ]
    },
    "1:13310": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "pipe",
        "AnonPipe"
      ]
    },
    "1:13444": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_common",
        "Command"
      ]
    },
    "1:13459": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_common",
        "Argv"
      ]
    },
    "1:13481": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_common",
        "Stdio"
      ]
    },
    "1:13550": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_common",
        "CommandArgs"
      ]
    },
    "1:13609": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "rwlock",
        "RWLock"
      ]
    },
    "1:13640": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "stack_overflow",
        "Handler"
      ]
    },
    "1:13778": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "stdio",
        "Stdin"
      ]
    },
    "1:13781": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "stdio",
        "Stdout"
      ]
    },
    "1:13784": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "stdio",
        "Stderr"
      ]
    },
    "1:13859": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "thread",
        "Thread"
      ]
    },
    "1:1395": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "Entry"
      ]
    },
    "1:14052": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fd",
        "FileDesc"
      ]
    },
    "1:14067": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fs",
        "FileAttr"
      ]
    },
    "1:14072": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fs",
        "StatxExtraFields"
      ]
    },
    "1:14077": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fs",
        "OpenOptions"
      ]
    },
    "1:1409": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "OccupiedEntry"
      ]
    },
    "1:14090": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fs",
        "FilePermissions"
      ]
    },
    "1:14103": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fs",
        "FileType"
      ]
    },
    "1:14120": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "fs",
        "DirBuilder"
      ]
    },
    "1:14126": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "io",
        "IoSlice"
      ]
    },
    "1:14136": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "sys",
        "unix",
        "kernel_copy",
        "SpliceMode"
      ]
    },
    "1:14149": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "os",
        "JoinPathsError"
      ]
    },
    "1:14153": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "os_str",
        "Buf"
      ]
    },
    "1:14166": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_common",
        "ExitCode"
      ]
    },
    "1:1418": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "VacantEntry"
      ]
    },
    "1:1427": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "map",
        "OccupiedError"
      ]
    },
    "1:14284": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_inner",
        "{{impl}}",
        "do_exec",
        "Reset"
      ]
    },
    "1:14300": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_inner",
        "{{impl}}",
        "posix_spawn",
        "PosixSpawnFileActions"
      ]
    },
    "1:14306": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_inner",
        "{{impl}}",
        "posix_spawn",
        "PosixSpawnattr"
      ]
    },
    "1:14363": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_inner",
        "ExitStatus"
      ]
    },
    "1:14376": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "process",
        "process_inner",
        "ExitStatusError"
      ]
    },
    "1:14389": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "time",
        "Timespec"
      ]
    },
    "1:14394": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "time",
        "inner",
        "Instant"
      ]
    },
    "1:14413": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys",
        "unix",
        "time",
        "inner",
        "SystemTime"
      ]
    },
    "1:14445": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "process",
        "CommandEnv"
      ]
    },
    "1:14453": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "process",
        "CommandEnvs"
      ]
    },
    "1:14499": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "wtf8",
        "CodePoint"
      ]
    },
    "1:14515": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "wtf8",
        "Wtf8Buf"
      ]
    },
    "1:14530": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "wtf8",
        "Wtf8"
      ]
    },
    "1:14543": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "wtf8",
        "Wtf8CodePoints"
      ]
    },
    "1:14549": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "wtf8",
        "EncodeWide"
      ]
    },
    "1:14658": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "net",
        "LookupHost"
      ]
    },
    "1:14680": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "net",
        "TcpStream"
      ]
    },
    "1:14718": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "net",
        "TcpListener"
      ]
    },
    "1:14739": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "net",
        "UdpSocket"
      ]
    },
    "1:14793": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "alloc",
        "System"
      ]
    },
    "1:14802": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "panicking",
        "Hook"
      ]
    },
    "1:14815": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace_rs",
        "backtrace",
        "Frame"
      ]
    },
    "1:14826": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "backtrace_rs",
        "backtrace",
        "libunwind",
        "Frame"
      ]
    },
    "1:15071": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace_rs",
        "symbolize",
        "gimli",
        "mmap",
        "Mmap"
      ]
    },
    "1:15287": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace_rs",
        "symbolize",
        "gimli",
        "Cache"
      ]
    },
    "1:15292": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "backtrace_rs",
        "types",
        "BytesOrWideString"
      ]
    },
    "1:15303": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "backtrace_rs",
        "print",
        "PrintFmt"
      ]
    },
    "1:15319": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "bool"
      ]
    },
    "1:15320": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "never"
      ]
    },
    "1:15321": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "char"
      ]
    },
    "1:15322": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "unit"
      ]
    },
    "1:15323": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "pointer"
      ]
    },
    "1:15324": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "array"
      ]
    },
    "1:15325": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "slice"
      ]
    },
    "1:15326": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "str"
      ]
    },
    "1:15327": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "tuple"
      ]
    },
    "1:15328": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "f32"
      ]
    },
    "1:15329": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "f64"
      ]
    },
    "1:15330": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "i8"
      ]
    },
    "1:15331": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "i16"
      ]
    },
    "1:15332": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "i32"
      ]
    },
    "1:15333": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "i64"
      ]
    },
    "1:15334": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "i128"
      ]
    },
    "1:15335": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "u8"
      ]
    },
    "1:15336": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "u16"
      ]
    },
    "1:15337": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "u32"
      ]
    },
    "1:15338": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "u64"
      ]
    },
    "1:15339": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "u128"
      ]
    },
    "1:15340": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "isize"
      ]
    },
    "1:15341": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "usize"
      ]
    },
    "1:15342": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "reference"
      ]
    },
    "1:15343": {
      "crate_id": 1,
      "kind": "primitive",
      "path": [
        "std",
        "fn"
      ]
    },
    "1:1805": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "set",
        "HashSet"
      ]
    },
    "1:1933": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "set",
        "Iter"
      ]
    },
    "1:1937": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "set",
        "IntoIter"
      ]
    },
    "1:1940": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "set",
        "Drain"
      ]
    },
    "1:1944": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "set",
        "DrainFilter"
      ]
    },
    "1:1949": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "set",
        "Intersection"
      ]
    },
    "1:1955": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "set",
        "Difference"
      ]
    },
    "1:1961": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "set",
        "SymmetricDifference"
      ]
    },
    "1:1966": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "collections",
        "hash",
        "set",
        "Union"
      ]
    },
    "1:2140": {
      "crate_id": 1,
      "kind": "module",
      "path": [
        "std",
        "env"
      ]
    },
    "1:2173": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "env",
        "Vars"
      ]
    },
    "1:2175": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "env",
        "VarsOs"
      ]
    },
    "1:2211": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "env",
        "SplitPaths"
      ]
    },
    "1:2234": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "env",
        "Args"
      ]
    },
    "1:2236": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "env",
        "ArgsOs"
      ]
    },
    "1:2337": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "error",
        "Error"
      ]
    },
    "1:2354": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "error",
        "{{impl}}",
        "from",
        "StringError"
      ]
    },
    "1:2614": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "1:2707": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Owned"
      ]
    },
    "1:2716": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Output"
      ]
    },
    "1:2779": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "ffi",
        "os_str",
        "OsString"
      ]
    },
    "1:2782": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "ffi",
        "os_str",
        "OsStr"
      ]
    },
    "1:2811": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "1:2928": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Owned"
      ]
    },
    "1:3028": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "fs",
        "File"
      ]
    },
    "1:3030": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "fs",
        "DirEntry"
      ]
    },
    "1:3033": {
      "crate_id": 1,
      "kind": "function",
      "path": [
        "std",
        "fs",
        "read"
      ]
    },
    "1:3036": {
      "crate_id": 1,
      "kind": "function",
      "path": [
        "std",
        "fs",
        "read_to_string"
      ]
    },
    "1:3153": {
      "crate_id": 1,
      "kind": "function",
      "path": [
        "std",
        "fs",
        "metadata"
      ]
    },
    "1:3155": {
      "crate_id": 1,
      "kind": "function",
      "path": [
        "std",
        "fs",
        "symlink_metadata"
      ]
    },
    "1:3169": {
      "crate_id": 1,
      "kind": "function",
      "path": [
        "std",
        "fs",
        "read_link"
      ]
    },
    "1:3171": {
      "crate_id": 1,
      "kind": "function",
      "path": [
        "std",
        "fs",
        "canonicalize"
      ]
    },
    "1:3181": {
      "crate_id": 1,
      "kind": "function",
      "path": [
        "std",
        "fs",
        "read_dir"
      ]
    },
    "1:3370": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "buffered",
        "bufreader",
        "BufReader"
      ]
    },
    "1:3462": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "buffered",
        "bufwriter",
        "BufWriter"
      ]
    },
    "1:3472": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "buffered",
        "bufwriter",
        "{{impl}}",
        "flush_buf",
        "BufGuard"
      ]
    },
    "1:3496": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "buffered",
        "bufwriter",
        "WriterPanicked"
      ]
    },
    "1:3550": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "buffered",
        "linewriter",
        "LineWriter"
      ]
    },
    "1:3807": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "std",
        "io",
        "error",
        "Result"
      ]
    },
    "1:3809": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "error",
        "Error"
      ]
    },
    "1:3813": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "io",
        "error",
        "Repr"
      ]
    },
    "1:4013": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "readbuf",
        "ReadBuf"
      ]
    },
    "1:4110": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "stdio",
        "StdinRaw"
      ]
    },
    "1:4113": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "stdio",
        "StdoutRaw"
      ]
    },
    "1:4116": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "stdio",
        "StderrRaw"
      ]
    },
    "1:4148": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "stdio",
        "Stdin"
      ]
    },
    "1:4150": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "stdio",
        "StdinLock"
      ]
    },
    "1:4192": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "stdio",
        "Stdout"
      ]
    },
    "1:4194": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "stdio",
        "StdoutLock"
      ]
    },
    "1:4235": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "stdio",
        "Stderr"
      ]
    },
    "1:4237": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "stdio",
        "StderrLock"
      ]
    },
    "1:4336": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "util",
        "Repeat"
      ]
    },
    "1:4368": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "Guard"
      ]
    },
    "1:4395": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "io",
        "Read"
      ]
    },
    "1:4396": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "Read",
        "read"
      ]
    },
    "1:4400": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "Read",
        "read_to_end"
      ]
    },
    "1:4402": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "Read",
        "read_exact"
      ]
    },
    "1:4413": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "IoSliceMut"
      ]
    },
    "1:4431": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "1:4450": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "1:4452": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "io",
        "Write"
      ]
    },
    "1:4453": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "Write",
        "write"
      ]
    },
    "1:4454": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "Write",
        "write_vectored"
      ]
    },
    "1:4458": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "Write",
        "write_all"
      ]
    },
    "1:4461": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "io",
        "Write",
        "write_fmt",
        "Adapter"
      ]
    },
    "1:4470": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "io",
        "Seek"
      ]
    },
    "1:4477": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "io",
        "BufRead"
      ]
    },
    "1:4478": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "BufRead",
        "fill_buf"
      ]
    },
    "1:4479": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "BufRead",
        "consume"
      ]
    },
    "1:4482": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "BufRead",
        "read_until"
      ]
    },
    "1:4483": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "io",
        "BufRead",
        "read_line"
      ]
    },
    "1:4758": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "net",
        "addr",
        "ToSocketAddrs"
      ]
    },
    "1:4788": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Iter"
      ]
    },
    "1:4792": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Iter"
      ]
    },
    "1:5143": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "tcp",
        "TcpStream"
      ]
    },
    "1:5146": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "tcp",
        "TcpListener"
      ]
    },
    "1:5271": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "net",
        "udp",
        "UdpSocket"
      ]
    },
    "1:5428": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "ffi",
        "os_str",
        "OsStringExt"
      ]
    },
    "1:5434": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "ffi",
        "os_str",
        "OsStrExt"
      ]
    },
    "1:5500": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "FileExt"
      ]
    },
    "1:5501": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "FileExt",
        "read_at"
      ]
    },
    "1:5503": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "FileExt",
        "write_at"
      ]
    },
    "1:5508": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "PermissionsExt"
      ]
    },
    "1:5516": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "OpenOptionsExt"
      ]
    },
    "1:5522": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "MetadataExt"
      ]
    },
    "1:5531": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "MetadataExt",
        "atime"
      ]
    },
    "1:5533": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "MetadataExt",
        "mtime"
      ]
    },
    "1:5535": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "MetadataExt",
        "ctime"
      ]
    },
    "1:5556": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "FileTypeExt"
      ]
    },
    "1:5566": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "DirEntryExt"
      ]
    },
    "1:5570": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "DirEntryExt2"
      ]
    },
    "1:5578": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "fs",
        "DirBuilderExt"
      ]
    },
    "1:5639": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "addr",
        "AsciiEscaped"
      ]
    },
    "1:5711": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "ancillary",
        "AncillaryDataIter"
      ]
    },
    "1:5733": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "ancillary",
        "ScmRights"
      ]
    },
    "1:5741": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "ancillary",
        "ScmCredentials"
      ]
    },
    "1:5749": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "ancillary",
        "AncillaryData"
      ]
    },
    "1:5762": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "ancillary",
        "Messages"
      ]
    },
    "1:5863": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "datagram",
        "UnixDatagram"
      ]
    },
    "1:5980": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "listener",
        "UnixListener"
      ]
    },
    "1:6100": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "unix",
        "net",
        "stream",
        "UnixStream"
      ]
    },
    "1:6216": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "process",
        "CommandExt"
      ]
    },
    "1:6220": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "unix",
        "process",
        "CommandExt",
        "pre_exec"
      ]
    },
    "1:6236": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "process",
        "ExitStatusExt"
      ]
    },
    "1:6334": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "unix",
        "thread",
        "JoinHandleExt"
      ]
    },
    "1:634": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "thread",
        "local",
        "LocalKey"
      ]
    },
    "1:6462": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "linux",
        "fs",
        "MetadataExt"
      ]
    },
    "1:6472": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "linux",
        "fs",
        "MetadataExt",
        "st_atime"
      ]
    },
    "1:6474": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "linux",
        "fs",
        "MetadataExt",
        "st_mtime"
      ]
    },
    "1:6476": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "linux",
        "fs",
        "MetadataExt",
        "st_ctime"
      ]
    },
    "1:6564": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "linux",
        "process",
        "ChildExt"
      ]
    },
    "1:6565": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "linux",
        "process",
        "ChildExt",
        "pidfd"
      ]
    },
    "1:6566": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "linux",
        "process",
        "ChildExt",
        "take_pidfd"
      ]
    },
    "1:6567": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "linux",
        "process",
        "CommandExt"
      ]
    },
    "1:6568": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "os",
        "linux",
        "process",
        "CommandExt",
        "create_pidfd"
      ]
    },
    "1:6636": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "fd",
        "raw",
        "AsRawFd"
      ]
    },
    "1:6638": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "fd",
        "raw",
        "FromRawFd"
      ]
    },
    "1:6640": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "fd",
        "raw",
        "IntoRawFd"
      ]
    },
    "1:6705": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "os",
        "fd",
        "owned",
        "OwnedFd"
      ]
    },
    "1:6723": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "os",
        "fd",
        "owned",
        "AsFd"
      ]
    },
    "1:6859": {
      "crate_id": 1,
      "kind": "function",
      "path": [
        "std",
        "panic",
        "always_abort"
      ]
    },
    "1:692": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "thread",
        "local",
        "fast",
        "Key"
      ]
    },
    "1:6983": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "{{impl}}",
        "fmt",
        "DebugHelper"
      ]
    },
    "1:7014": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "{{impl}}",
        "fmt",
        "DebugHelper"
      ]
    },
    "1:7060": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "PathBuf"
      ]
    },
    "1:7125": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "1:7152": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Owned"
      ]
    },
    "1:7167": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "Path"
      ]
    },
    "1:7233": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "path",
        "Display"
      ]
    },
    "1:7271": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Item"
      ]
    },
    "1:7272": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "IntoIter"
      ]
    },
    "1:729": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "thread",
        "local",
        "os",
        "Key"
      ]
    },
    "1:7339": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "Child"
      ]
    },
    "1:7353": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "ChildStdin"
      ]
    },
    "1:7373": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "ChildStdout"
      ]
    },
    "1:7387": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "ChildStderr"
      ]
    },
    "1:7401": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "Command"
      ]
    },
    "1:7456": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "process",
        "Stdio"
      ]
    },
    "1:7505": {
      "crate_id": 1,
      "kind": "function",
      "path": [
        "std",
        "process",
        "exit"
      ]
    },
    "1:7508": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "process",
        "Termination"
      ]
    },
    "1:7637": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "blocking",
        "Inner"
      ]
    },
    "1:7642": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "blocking",
        "WaitToken"
      ]
    },
    "1:7685": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "mpsc_queue",
        "Queue"
      ]
    },
    "1:7737": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "oneshot",
        "Packet"
      ]
    },
    "1:7838": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "shared",
        "Packet"
      ]
    },
    "1:7899": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "spsc_queue",
        "Queue"
      ]
    },
    "1:7994": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "stream",
        "Packet"
      ]
    },
    "1:807": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "thread",
        "Packet"
      ]
    },
    "1:8085": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "sync",
        "Packet"
      ]
    },
    "1:8093": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "sync",
        "State"
      ]
    },
    "1:8115": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "sync",
        "Node"
      ]
    },
    "1:8179": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "Receiver"
      ]
    },
    "1:8186": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "Sender"
      ]
    },
    "1:8193": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mpsc",
        "SyncSender"
      ]
    },
    "1:823": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "thread",
        "JoinHandle"
      ]
    },
    "1:8344": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "barrier",
        "Barrier"
      ]
    },
    "1:8351": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "barrier",
        "BarrierWaitResult"
      ]
    },
    "1:8395": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "condvar",
        "Condvar"
      ]
    },
    "1:8453": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mutex",
        "Mutex"
      ]
    },
    "1:8462": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mutex",
        "MutexGuard"
      ]
    },
    "1:8493": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "mutex",
        "{{impl}}",
        "fmt",
        "LockedPlaceholder"
      ]
    },
    "1:8504": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "1:8558": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "once",
        "Once"
      ]
    },
    "1:857": {
      "crate_id": 1,
      "kind": "trait",
      "path": [
        "std",
        "ascii",
        "AsciiExt"
      ]
    },
    "1:8575": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "once",
        "WaiterQueue"
      ]
    },
    "1:860": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "ascii",
        "AsciiExt",
        "to_ascii_uppercase"
      ]
    },
    "1:861": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "ascii",
        "AsciiExt",
        "to_ascii_lowercase"
      ]
    },
    "1:8623": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "poison",
        "PoisonError"
      ]
    },
    "1:8626": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "sync",
        "poison",
        "TryLockError"
      ]
    },
    "1:863": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "ascii",
        "AsciiExt",
        "make_ascii_uppercase"
      ]
    },
    "1:864": {
      "crate_id": 1,
      "kind": "foreign_type",
      "path": [
        "std",
        "ascii",
        "AsciiExt",
        "make_ascii_lowercase"
      ]
    },
    "1:8699": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "rwlock",
        "RwLock"
      ]
    },
    "1:8708": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "rwlock",
        "RwLockReadGuard"
      ]
    },
    "1:871": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Owned"
      ]
    },
    "1:8716": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "rwlock",
        "RwLockWriteGuard"
      ]
    },
    "1:873": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Owned"
      ]
    },
    "1:8742": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sync",
        "rwlock",
        "{{impl}}",
        "fmt",
        "LockedPlaceholder"
      ]
    },
    "1:8776": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "1:8780": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "1:8935": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "lazy",
        "SyncOnceCell"
      ]
    },
    "1:8994": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "lazy",
        "SyncLazy"
      ]
    },
    "1:9024": {
      "crate_id": 1,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "1:914": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace",
        "Backtrace"
      ]
    },
    "1:9160": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "backtrace",
        "_print",
        "DisplayBacktrace"
      ]
    },
    "1:9232": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "condvar",
        "Condvar"
      ]
    },
    "1:9277": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "mutex",
        "StaticMutex"
      ]
    },
    "1:9284": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "mutex",
        "StaticMutexGuard"
      ]
    },
    "1:9289": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "mutex",
        "MovableMutex"
      ]
    },
    "1:931": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace",
        "BacktraceFrame"
      ]
    },
    "1:934": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace",
        "BacktraceSymbol"
      ]
    },
    "1:9361": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "remutex",
        "ReentrantMutex"
      ]
    },
    "1:9374": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "remutex",
        "ReentrantMutexGuard"
      ]
    },
    "1:939": {
      "crate_id": 1,
      "kind": "enum",
      "path": [
        "std",
        "backtrace",
        "BytesOrWide"
      ]
    },
    "1:9407": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "rwlock",
        "StaticRWLockReadGuard"
      ]
    },
    "1:9412": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "rwlock",
        "StaticRWLockWriteGuard"
      ]
    },
    "1:9417": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "rwlock",
        "MovableRWLock"
      ]
    },
    "1:9504": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "sys_common",
        "thread_local_key",
        "Key"
      ]
    },
    "1:972": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace",
        "LazilyResolvedCapture"
      ]
    },
    "1:9996": {
      "crate_id": 1,
      "kind": "struct",
      "path": [
        "std",
        "backtrace_rs",
        "symbolize",
        "Symbol"
      ]
    },
    "2:0": {
      "crate_id": 2,
      "kind": "module",
      "path": [
        "core"
      ]
    },
    "2:10141": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Output"
      ]
    },
    "2:10156": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "slice",
        "index",
        "private_slice_index",
        "Sealed"
      ]
    },
    "2:10165": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "slice",
        "index",
        "SliceIndex"
      ]
    },
    "2:10334": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Item"
      ]
    },
    "2:10335": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "IntoIter"
      ]
    },
    "2:10340": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Item"
      ]
    },
    "2:10341": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "IntoIter"
      ]
    },
    "2:10345": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "Iter"
      ]
    },
    "2:10369": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "IterMut"
      ]
    },
    "2:10393": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "Split"
      ]
    },
    "2:10435": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "SplitInclusive"
      ]
    },
    "2:10474": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "SplitMut"
      ]
    },
    "2:10512": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "SplitInclusiveMut"
      ]
    },
    "2:10547": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "RSplit"
      ]
    },
    "2:10585": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "RSplitMut"
      ]
    },
    "2:10626": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "SplitN"
      ]
    },
    "2:10640": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "RSplitN"
      ]
    },
    "2:10654": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "SplitNMut"
      ]
    },
    "2:10668": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "RSplitNMut"
      ]
    },
    "2:11137": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "GroupBy"
      ]
    },
    "2:11170": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "GroupByMut"
      ]
    },
    "2:11256": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "sort",
        "CopyOnDrop"
      ]
    },
    "2:11689": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "slice",
        "SlicePattern"
      ]
    },
    "2:11694": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Item"
      ]
    },
    "2:11713": {
      "crate_id": 2,
      "kind": "function",
      "path": [
        "core",
        "str",
        "converts",
        "from_utf8"
      ]
    },
    "2:11909": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "SplitInternal"
      ]
    },
    "2:11946": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "SplitNInternal"
      ]
    },
    "2:11969": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "MatchIndicesInternal"
      ]
    },
    "2:11985": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "MatchesInternal"
      ]
    },
    "2:12020": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "SplitInclusive"
      ]
    },
    "2:12113": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Output"
      ]
    },
    "2:12167": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "str",
        "traits",
        "FromStr"
      ]
    },
    "2:12168": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "str",
        "traits",
        "FromStr",
        "Err"
      ]
    },
    "2:12229": {
      "crate_id": 2,
      "kind": "module",
      "path": [
        "core",
        "str",
        "pattern"
      ]
    },
    "2:12239": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "str",
        "pattern",
        "Pattern"
      ]
    },
    "2:12248": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "str",
        "pattern",
        "Searcher"
      ]
    },
    "2:12251": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "str",
        "pattern",
        "Searcher",
        "next"
      ]
    },
    "2:12252": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "str",
        "pattern",
        "Searcher",
        "next_match"
      ]
    },
    "2:12253": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "str",
        "pattern",
        "Searcher",
        "next_reject"
      ]
    },
    "2:12254": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "str",
        "pattern",
        "ReverseSearcher"
      ]
    },
    "2:12256": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "str",
        "pattern",
        "ReverseSearcher",
        "next_back"
      ]
    },
    "2:12259": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "str",
        "pattern",
        "DoubleEndedSearcher"
      ]
    },
    "2:12305": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "MultiCharEqPattern"
      ]
    },
    "2:12385": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Searcher"
      ]
    },
    "2:12454": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "lossy",
        "Utf8Lossy"
      ]
    },
    "2:12459": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "lossy",
        "Utf8LossyChunksIter"
      ]
    },
    "2:12938": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "future",
        "future",
        "Future"
      ]
    },
    "2:12953": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "future",
        "into_future",
        "IntoFuture"
      ]
    },
    "2:12959": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Output"
      ]
    },
    "2:12960": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Future"
      ]
    },
    "2:12988": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "future",
        "join",
        "MaybeDone"
      ]
    },
    "2:13029": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "future",
        "pending",
        "Pending"
      ]
    },
    "2:13066": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "future",
        "poll_fn",
        "PollFn"
      ]
    },
    "2:13136": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "future",
        "from_generator",
        "GenFuture"
      ]
    },
    "2:13240": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "task",
        "wake",
        "Context"
      ]
    },
    "2:13250": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "task",
        "wake",
        "Waker"
      ]
    },
    "2:13300": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "task",
        "ready",
        "Ready"
      ]
    },
    "2:13336": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "alloc",
        "global",
        "GlobalAlloc"
      ]
    },
    "2:13407": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "alloc",
        "Allocator"
      ]
    },
    "2:14": {
      "crate_id": 2,
      "kind": "macro",
      "path": [
        "core",
        "write"
      ]
    },
    "2:1889": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "2:1950": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "mem",
        "maybe_uninit",
        "{{impl}}",
        "write_slice_cloned",
        "Guard"
      ]
    },
    "2:1997": {
      "crate_id": 2,
      "kind": "function",
      "path": [
        "core",
        "mem",
        "drop"
      ]
    },
    "2:2002": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "mem",
        "Discriminant"
      ]
    },
    "2:2074": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ptr",
        "metadata",
        "Pointee"
      ]
    },
    "2:2088": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ptr",
        "metadata",
        "PtrComponents"
      ]
    },
    "2:2097": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ptr",
        "metadata",
        "DynMetadata"
      ]
    },
    "2:21": {
      "crate_id": 2,
      "kind": "macro",
      "path": [
        "core",
        "format_args"
      ]
    },
    "2:21681": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "swizzle",
        "{{impl}}",
        "reverse",
        "Reverse"
      ]
    },
    "2:21694": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "swizzle",
        "{{impl}}",
        "rotate_lanes_left",
        "Rotate"
      ]
    },
    "2:21709": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "swizzle",
        "{{impl}}",
        "rotate_lanes_right",
        "Rotate"
      ]
    },
    "2:21726": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "swizzle",
        "{{impl}}",
        "interleave",
        "Lo"
      ]
    },
    "2:21728": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "swizzle",
        "{{impl}}",
        "interleave",
        "Hi"
      ]
    },
    "2:21747": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "swizzle",
        "{{impl}}",
        "deinterleave",
        "Even"
      ]
    },
    "2:21749": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "swizzle",
        "{{impl}}",
        "deinterleave",
        "Odd"
      ]
    },
    "2:21935": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "core_simd",
        "lane_count",
        "sealed",
        "Sealed"
      ]
    },
    "2:21939": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "lane_count",
        "LaneCount"
      ]
    },
    "2:21945": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "core_simd",
        "lane_count",
        "SupportedLaneCount"
      ]
    },
    "2:21995": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "masks",
        "mask_impl",
        "Mask"
      ]
    },
    "2:2201": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ptr",
        "non_null",
        "NonNull"
      ]
    },
    "2:22079": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "core_simd",
        "masks",
        "sealed",
        "Sealed"
      ]
    },
    "2:22088": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "core_simd",
        "masks",
        "MaskElement"
      ]
    },
    "2:22090": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "masks",
        "Mask"
      ]
    },
    "2:22637": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "vector",
        "Simd"
      ]
    },
    "2:22730": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "core_simd",
        "vector",
        "sealed",
        "Sealed"
      ]
    },
    "2:22734": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "core_simd",
        "vector",
        "SimdElement"
      ]
    },
    "2:22834": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "bignum",
        "Big32x40"
      ]
    },
    "2:22917": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "bignum",
        "tests",
        "Big8x3"
      ]
    },
    "2:23000": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "dec2flt",
        "common",
        "AsciiStr"
      ]
    },
    "2:23022": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "dec2flt",
        "common",
        "BiasedFp"
      ]
    },
    "2:23039": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "dec2flt",
        "decimal",
        "Decimal"
      ]
    },
    "2:23055": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "dec2flt",
        "number",
        "Number"
      ]
    },
    "2:2308": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ptr",
        "unique",
        "Unique"
      ]
    },
    "2:23080": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "dec2flt",
        "ParseFloatError"
      ]
    },
    "2:23093": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "num",
        "dec2flt",
        "FloatErrorKind"
      ]
    },
    "2:23108": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "diy_float",
        "Fp"
      ]
    },
    "2:23116": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "flt2dec",
        "decoder",
        "Decoded"
      ]
    },
    "2:23134": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "num",
        "flt2dec",
        "decoder",
        "FullDecoded"
      ]
    },
    "2:23156": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "num",
        "flt2dec",
        "Sign"
      ]
    },
    "2:23172": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "num",
        "fmt",
        "Part"
      ]
    },
    "2:23202": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "fmt",
        "Formatted"
      ]
    },
    "2:23209": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "error",
        "TryFromIntError"
      ]
    },
    "2:23224": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "error",
        "ParseIntError"
      ]
    },
    "2:23237": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "num",
        "error",
        "IntErrorKind"
      ]
    },
    "2:23496": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroU8"
      ]
    },
    "2:23528": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroU16"
      ]
    },
    "2:23560": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroU32"
      ]
    },
    "2:23592": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroU64"
      ]
    },
    "2:23624": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroU128"
      ]
    },
    "2:23656": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroUsize"
      ]
    },
    "2:23688": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroI8"
      ]
    },
    "2:23720": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroI16"
      ]
    },
    "2:23752": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroI32"
      ]
    },
    "2:23784": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroI64"
      ]
    },
    "2:23816": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroI128"
      ]
    },
    "2:23848": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "nonzero",
        "NonZeroIsize"
      ]
    },
    "2:24144": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "saturating",
        "Saturating"
      ]
    },
    "2:2529": {
      "crate_id": 2,
      "kind": "function",
      "path": [
        "core",
        "ptr",
        "drop_in_place"
      ]
    },
    "2:2617": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "borrow",
        "Borrow"
      ]
    },
    "2:2620": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "borrow",
        "BorrowMut"
      ]
    },
    "2:2639": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "clone",
        "Clone"
      ]
    },
    "2:2640": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "clone",
        "Clone",
        "clone"
      ]
    },
    "2:26571": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "num",
        "wrapping",
        "Wrapping"
      ]
    },
    "2:2669": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "cmp",
        "PartialEq"
      ]
    },
    "2:2674": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "cmp",
        "Eq"
      ]
    },
    "2:2705": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "cmp",
        "Ord"
      ]
    },
    "2:2716": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "cmp",
        "PartialOrd"
      ]
    },
    "2:2852": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "convert",
        "num",
        "private",
        "Sealed"
      ]
    },
    "2:2853": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "convert",
        "num",
        "FloatToInt"
      ]
    },
    "2:2915": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "convert",
        "AsRef"
      ]
    },
    "2:2918": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "convert",
        "AsMut"
      ]
    },
    "2:2921": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "convert",
        "Into"
      ]
    },
    "2:2924": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "convert",
        "From"
      ]
    },
    "2:2927": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "convert",
        "TryInto"
      ]
    },
    "2:2931": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "convert",
        "TryFrom"
      ]
    },
    "2:2960": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Error"
      ]
    },
    "2:2965": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Error"
      ]
    },
    "2:2996": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "default",
        "Default"
      ]
    },
    "2:2997": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "default",
        "Default",
        "default"
      ]
    },
    "2:3018": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "marker",
        "Send"
      ]
    },
    "2:3023": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "marker",
        "Sized"
      ]
    },
    "2:3024": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "marker",
        "Unsize"
      ]
    },
    "2:3026": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "marker",
        "StructuralPartialEq"
      ]
    },
    "2:3027": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "marker",
        "StructuralEq"
      ]
    },
    "2:3028": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "marker",
        "Copy"
      ]
    },
    "2:30292": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "num",
        "FpCategory"
      ]
    },
    "2:3030": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "marker",
        "Sync"
      ]
    },
    "2:3036": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "marker",
        "PhantomData"
      ]
    },
    "2:30434": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "mem",
        "manually_drop",
        "ManuallyDrop"
      ]
    },
    "2:3046": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "marker",
        "Freeze"
      ]
    },
    "2:30469": {
      "crate_id": 2,
      "kind": "union",
      "path": [
        "core",
        "mem",
        "maybe_uninit",
        "MaybeUninit"
      ]
    },
    "2:3059": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "marker",
        "Unpin"
      ]
    },
    "2:3085": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "Add"
      ]
    },
    "2:3090": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "Sub"
      ]
    },
    "2:3095": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "Mul"
      ]
    },
    "2:3100": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "Div"
      ]
    },
    "2:3106": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "Rem"
      ]
    },
    "2:3112": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "Neg"
      ]
    },
    "2:3116": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "AddAssign"
      ]
    },
    "2:3120": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "SubAssign"
      ]
    },
    "2:3124": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "MulAssign"
      ]
    },
    "2:3128": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "DivAssign"
      ]
    },
    "2:3132": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "arith",
        "RemAssign"
      ]
    },
    "2:3137": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "Not"
      ]
    },
    "2:3141": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "BitAnd"
      ]
    },
    "2:3146": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "BitOr"
      ]
    },
    "2:3151": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "BitXor"
      ]
    },
    "2:3156": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "Shl"
      ]
    },
    "2:3162": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "Shr"
      ]
    },
    "2:3168": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "BitAndAssign"
      ]
    },
    "2:3172": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "BitOrAssign"
      ]
    },
    "2:3176": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "BitXorAssign"
      ]
    },
    "2:3180": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "ShlAssign"
      ]
    },
    "2:3185": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "bit",
        "ShrAssign"
      ]
    },
    "2:3233": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "deref",
        "Deref"
      ]
    },
    "2:3246": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "deref",
        "DerefMut"
      ]
    },
    "2:3257": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "drop",
        "Drop"
      ]
    },
    "2:3260": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "function",
        "Fn"
      ]
    },
    "2:3263": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "function",
        "FnMut"
      ]
    },
    "2:3266": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "function",
        "FnOnce"
      ]
    },
    "2:3300": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "generator",
        "Generator"
      ]
    },
    "2:3318": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "index",
        "Index"
      ]
    },
    "2:3322": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "index",
        "IndexMut"
      ]
    },
    "2:3389": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "range",
        "RangeBounds"
      ]
    },
    "2:3458": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "range",
        "OneSidedRange"
      ]
    },
    "2:3470": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "try_trait",
        "Try"
      ]
    },
    "2:3475": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "try_trait",
        "FromResidual"
      ]
    },
    "2:3477": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "ops",
        "try_trait",
        "FromResidual",
        "from_residual"
      ]
    },
    "2:3478": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "try_trait",
        "Residual"
      ]
    },
    "2:3484": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ops",
        "try_trait",
        "NeverShortCircuit"
      ]
    },
    "2:3488": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "ops",
        "try_trait",
        "NeverShortCircuitResidual"
      ]
    },
    "2:3505": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "unsize",
        "CoerceUnsized"
      ]
    },
    "2:35379": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "cmp",
        "Ordering"
      ]
    },
    "2:35400": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cmp",
        "Reverse"
      ]
    },
    "2:3542": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ops",
        "unsize",
        "DispatchFromDyn"
      ]
    },
    "2:36557": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "convert",
        "Infallible"
      ]
    },
    "2:36620": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "marker",
        "PhantomPinned"
      ]
    },
    "2:3727": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "any",
        "Any"
      ]
    },
    "2:4": {
      "crate_id": 2,
      "kind": "macro",
      "path": [
        "core",
        "panic"
      ]
    },
    "2:4023": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "array",
        "iter",
        "IntoIter"
      ]
    },
    "2:4311": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "array",
        "try_collect_into_array",
        "Guard"
      ]
    },
    "2:43533": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "ops",
        "control_flow",
        "ControlFlow"
      ]
    },
    "2:43561": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "ops",
        "generator",
        "GeneratorState"
      ]
    },
    "2:43609": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ops",
        "range",
        "RangeFull"
      ]
    },
    "2:43625": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ops",
        "range",
        "Range"
      ]
    },
    "2:43650": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ops",
        "range",
        "RangeFrom"
      ]
    },
    "2:43671": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ops",
        "range",
        "RangeTo"
      ]
    },
    "2:43694": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ops",
        "range",
        "RangeInclusive"
      ]
    },
    "2:43717": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ops",
        "range",
        "RangeToInclusive"
      ]
    },
    "2:43740": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "ops",
        "range",
        "Bound"
      ]
    },
    "2:43773": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "any",
        "TypeId"
      ]
    },
    "2:43832": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "array",
        "TryFromSliceError"
      ]
    },
    "2:4385": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cell",
        "Cell"
      ]
    },
    "2:44005": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ascii",
        "EscapeDefault"
      ]
    },
    "2:44011": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "char",
        "convert",
        "ParseCharError"
      ]
    },
    "2:44024": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "char",
        "convert",
        "CharErrorKind"
      ]
    },
    "2:44040": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "char",
        "convert",
        "CharTryFromError"
      ]
    },
    "2:44055": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "char",
        "decode",
        "DecodeUtf16"
      ]
    },
    "2:44065": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "char",
        "decode",
        "DecodeUtf16Error"
      ]
    },
    "2:44078": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "char",
        "EscapeUnicode"
      ]
    },
    "2:44086": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "char",
        "EscapeUnicodeState"
      ]
    },
    "2:44103": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "char",
        "EscapeDefault"
      ]
    },
    "2:44109": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "char",
        "EscapeDefaultState"
      ]
    },
    "2:44125": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "char",
        "EscapeDebug"
      ]
    },
    "2:44132": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "char",
        "ToLowercase"
      ]
    },
    "2:44139": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "char",
        "ToUppercase"
      ]
    },
    "2:44146": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "char",
        "CaseMappingIter"
      ]
    },
    "2:44165": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ffi",
        "VaListImpl"
      ]
    },
    "2:44175": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "ffi",
        "VaList"
      ]
    },
    "2:44195": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "chain",
        "Chain"
      ]
    },
    "2:44208": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "cloned",
        "Cloned"
      ]
    },
    "2:44217": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "copied",
        "Copied"
      ]
    },
    "2:44226": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "cycle",
        "Cycle"
      ]
    },
    "2:44236": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "enumerate",
        "Enumerate"
      ]
    },
    "2:44246": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "filter",
        "Filter"
      ]
    },
    "2:44255": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "filter_map",
        "FilterMap"
      ]
    },
    "2:44264": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "flatten",
        "FlattenCompat"
      ]
    },
    "2:44278": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "fuse",
        "Fuse"
      ]
    },
    "2:44287": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "inspect",
        "Inspect"
      ]
    },
    "2:44296": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "intersperse",
        "Intersperse"
      ]
    },
    "2:44307": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "map",
        "Map"
      ]
    },
    "2:44316": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "map_while",
        "MapWhile"
      ]
    },
    "2:44325": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "peekable",
        "Peekable"
      ]
    },
    "2:44335": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "rev",
        "Rev"
      ]
    },
    "2:44344": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "scan",
        "Scan"
      ]
    },
    "2:44356": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "skip",
        "Skip"
      ]
    },
    "2:44366": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "skip_while",
        "SkipWhile"
      ]
    },
    "2:44376": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "step_by",
        "StepBy"
      ]
    },
    "2:44387": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "take",
        "Take"
      ]
    },
    "2:44397": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "take_while",
        "TakeWhile"
      ]
    },
    "2:44407": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "zip",
        "Zip"
      ]
    },
    "2:4450": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cell",
        "RefCell"
      ]
    },
    "2:4454": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cell",
        "BorrowError"
      ]
    },
    "2:44578": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "sources",
        "from_fn",
        "FromFn"
      ]
    },
    "2:44585": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "sources",
        "once",
        "Once"
      ]
    },
    "2:4459": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cell",
        "BorrowMutError"
      ]
    },
    "2:44594": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "sources",
        "once_with",
        "OnceWith"
      ]
    },
    "2:44603": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "sources",
        "repeat",
        "Repeat"
      ]
    },
    "2:44612": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "sources",
        "repeat_with",
        "RepeatWith"
      ]
    },
    "2:44623": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "sources",
        "successors",
        "Successors"
      ]
    },
    "2:45100": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "option",
        "Option"
      ]
    },
    "2:45133": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "option",
        "Item"
      ]
    },
    "2:45142": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "option",
        "Iter"
      ]
    },
    "2:45150": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "option",
        "IterMut"
      ]
    },
    "2:45158": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "option",
        "IntoIter"
      ]
    },
    "2:45167": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "panic",
        "location",
        "Location"
      ]
    },
    "2:45201": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "panic",
        "panic_info",
        "PanicInfo"
      ]
    },
    "2:45209": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "panicking",
        "AssertKind"
      ]
    },
    "2:4521": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cell",
        "BorrowRef"
      ]
    },
    "2:45218": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "pin",
        "Pin"
      ]
    },
    "2:45226": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "result",
        "Result"
      ]
    },
    "2:45270": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "result",
        "Iter"
      ]
    },
    "2:45278": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "result",
        "IterMut"
      ]
    },
    "2:45286": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "result",
        "IntoIter"
      ]
    },
    "2:45295": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "stream",
        "from_iter",
        "FromIter"
      ]
    },
    "2:45304": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "sync",
        "atomic",
        "Ordering"
      ]
    },
    "2:4531": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cell",
        "Ref"
      ]
    },
    "2:45329": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicI8"
      ]
    },
    "2:45365": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicU8"
      ]
    },
    "2:4538": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "2:45401": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicI16"
      ]
    },
    "2:45437": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicU16"
      ]
    },
    "2:45473": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicI32"
      ]
    },
    "2:45509": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicU32"
      ]
    },
    "2:45545": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicI64"
      ]
    },
    "2:45581": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicU64"
      ]
    },
    "2:45617": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicIsize"
      ]
    },
    "2:45653": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicUsize"
      ]
    },
    "2:4576": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cell",
        "BorrowRefMut"
      ]
    },
    "2:45805": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "num",
        "Binary"
      ]
    },
    "2:45812": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "num",
        "Octal"
      ]
    },
    "2:45819": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "num",
        "LowerHex"
      ]
    },
    "2:45826": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "num",
        "UpperHex"
      ]
    },
    "2:4585": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cell",
        "RefMut"
      ]
    },
    "2:4592": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "2:4604": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "cell",
        "UnsafeCell"
      ]
    },
    "2:46045": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "fmt",
        "Alignment"
      ]
    },
    "2:46054": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "rt",
        "v1",
        "Argument"
      ]
    },
    "2:46060": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "rt",
        "v1",
        "FormatSpec"
      ]
    },
    "2:46069": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "fmt",
        "rt",
        "v1",
        "Alignment"
      ]
    },
    "2:46087": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "fmt",
        "rt",
        "v1",
        "Count"
      ]
    },
    "2:46099": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "Error"
      ]
    },
    "2:46121": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "ArgumentV1"
      ]
    },
    "2:46130": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "fmt",
        "FlagV1"
      ]
    },
    "2:46146": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "Arguments"
      ]
    },
    "2:46306": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "hash",
        "sip",
        "SipHasher13"
      ]
    },
    "2:46314": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "hash",
        "sip",
        "SipHasher24"
      ]
    },
    "2:46322": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "hash",
        "sip",
        "SipHasher"
      ]
    },
    "2:46331": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "hash",
        "sip",
        "Hasher"
      ]
    },
    "2:46343": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "hash",
        "sip",
        "State"
      ]
    },
    "2:46353": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "hash",
        "sip",
        "Sip13Rounds"
      ]
    },
    "2:46361": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "hash",
        "sip",
        "Sip24Rounds"
      ]
    },
    "2:46553": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "ascii",
        "EscapeByte"
      ]
    },
    "2:46557": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "ascii",
        "EscapeAscii"
      ]
    },
    "2:46703": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "GenericSplitN"
      ]
    },
    "2:46754": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "Windows"
      ]
    },
    "2:46763": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "Chunks"
      ]
    },
    "2:46772": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "ChunksMut"
      ]
    },
    "2:46781": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "ChunksExact"
      ]
    },
    "2:46791": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "ChunksExactMut"
      ]
    },
    "2:46801": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "ArrayWindows"
      ]
    },
    "2:46827": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "ArrayChunks"
      ]
    },
    "2:46840": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "ArrayChunksMut"
      ]
    },
    "2:46853": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "RChunks"
      ]
    },
    "2:46862": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "RChunksMut"
      ]
    },
    "2:46871": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "RChunksExact"
      ]
    },
    "2:46881": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "slice",
        "iter",
        "RChunksExactMut"
      ]
    },
    "2:46893": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "error",
        "Utf8Error"
      ]
    },
    "2:46908": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "error",
        "ParseBoolError"
      ]
    },
    "2:46920": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "Chars"
      ]
    },
    "2:46926": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "CharIndices"
      ]
    },
    "2:46936": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "Bytes"
      ]
    },
    "2:46950": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "Split"
      ]
    },
    "2:46968": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "RSplit"
      ]
    },
    "2:47000": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "SplitTerminator"
      ]
    },
    "2:47018": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "RSplitTerminator"
      ]
    },
    "2:47054": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "SplitN"
      ]
    },
    "2:47072": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "RSplitN"
      ]
    },
    "2:47100": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "MatchIndices"
      ]
    },
    "2:47118": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "RMatchIndices"
      ]
    },
    "2:47154": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "Matches"
      ]
    },
    "2:47172": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "RMatches"
      ]
    },
    "2:47204": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "Lines"
      ]
    },
    "2:47214": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "LinesAny"
      ]
    },
    "2:47224": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "SplitWhitespace"
      ]
    },
    "2:47233": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "SplitAsciiWhitespace"
      ]
    },
    "2:47242": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "EncodeUtf16"
      ]
    },
    "2:47249": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "EscapeDebug"
      ]
    },
    "2:47258": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "EscapeDefault"
      ]
    },
    "2:47267": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "iter",
        "EscapeUnicode"
      ]
    },
    "2:47330": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "str",
        "pattern",
        "SearchStep"
      ]
    },
    "2:47353": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "CharSearcher"
      ]
    },
    "2:47368": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "MultiCharEqSearcher"
      ]
    },
    "2:47382": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "CharArraySearcher"
      ]
    },
    "2:47399": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "CharArrayRefSearcher"
      ]
    },
    "2:47447": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "CharSliceSearcher"
      ]
    },
    "2:47467": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Searcher"
      ]
    },
    "2:47474": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "CharPredicateSearcher"
      ]
    },
    "2:47490": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Searcher"
      ]
    },
    "2:47511": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "StrSearcher"
      ]
    },
    "2:47525": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "str",
        "pattern",
        "StrSearcherImpl"
      ]
    },
    "2:47536": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "EmptyNeedle"
      ]
    },
    "2:47546": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "pattern",
        "TwoWaySearcher"
      ]
    },
    "2:47559": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "lossy",
        "Utf8LossyChunk"
      ]
    },
    "2:47658": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "LinesAnyMap"
      ]
    },
    "2:47662": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "CharEscapeDebugContinue"
      ]
    },
    "2:47666": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "CharEscapeUnicode"
      ]
    },
    "2:47670": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "CharEscapeDefault"
      ]
    },
    "2:47674": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "IsWhitespace"
      ]
    },
    "2:47678": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "IsAsciiWhitespace"
      ]
    },
    "2:47682": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "IsNotEmpty"
      ]
    },
    "2:47686": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "BytesIsNotEmpty"
      ]
    },
    "2:47690": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "str",
        "UnsafeBytesToStr"
      ]
    },
    "2:47694": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "time",
        "Duration"
      ]
    },
    "2:47716": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "time",
        "FromSecsError"
      ]
    },
    "2:47729": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "time",
        "FromSecsErrorKind"
      ]
    },
    "2:47828": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "future",
        "ready",
        "Ready"
      ]
    },
    "2:47838": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "future",
        "ResumeTy"
      ]
    },
    "2:47846": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "task",
        "poll",
        "Poll"
      ]
    },
    "2:47882": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "task",
        "wake",
        "RawWaker"
      ]
    },
    "2:47891": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "task",
        "wake",
        "RawWakerVTable"
      ]
    },
    "2:47905": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "alloc",
        "layout",
        "Layout"
      ]
    },
    "2:47920": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "alloc",
        "layout",
        "LayoutError"
      ]
    },
    "2:47932": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "alloc",
        "AllocError"
      ]
    },
    "2:4815": {
      "crate_id": 2,
      "kind": "constant",
      "path": [
        "core",
        "char",
        "REPLACEMENT_CHARACTER"
      ]
    },
    "2:48511": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u8x2"
      ]
    },
    "2:48532": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i8x2"
      ]
    },
    "2:48557": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u8x4"
      ]
    },
    "2:48580": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u16x2"
      ]
    },
    "2:48605": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i8x4"
      ]
    },
    "2:48628": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i16x2"
      ]
    },
    "2:48661": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u8x8"
      ]
    },
    "2:48692": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u16x4"
      ]
    },
    "2:48715": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u32x2"
      ]
    },
    "2:48734": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u64x1"
      ]
    },
    "2:48766": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i8x8"
      ]
    },
    "2:48797": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i16x4"
      ]
    },
    "2:48820": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i32x2"
      ]
    },
    "2:48839": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i64x1"
      ]
    },
    "2:48859": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "f32x2"
      ]
    },
    "2:48878": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "f64x1"
      ]
    },
    "2:4892": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "ffi",
        "c_void"
      ]
    },
    "2:48926": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u8x16"
      ]
    },
    "2:48973": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u16x8"
      ]
    },
    "2:49004": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u32x4"
      ]
    },
    "2:49027": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u64x2"
      ]
    },
    "2:4906": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "2:49076": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i8x16"
      ]
    },
    "2:49123": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i16x8"
      ]
    },
    "2:4913": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "ffi",
        "sealed_trait",
        "VaArgSafe"
      ]
    },
    "2:49154": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i32x4"
      ]
    },
    "2:49177": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i64x2"
      ]
    },
    "2:49202": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "f32x4"
      ]
    },
    "2:49225": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "f64x2"
      ]
    },
    "2:49250": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "f64x4"
      ]
    },
    "2:49302": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "m8x16"
      ]
    },
    "2:49350": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "m16x8"
      ]
    },
    "2:49382": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "m32x4"
      ]
    },
    "2:4939": {
      "crate_id": 2,
      "kind": "module",
      "path": [
        "core",
        "iter"
      ]
    },
    "2:49406": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "m64x2"
      ]
    },
    "2:49487": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u8x32"
      ]
    },
    "2:49566": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u16x16"
      ]
    },
    "2:49613": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u32x8"
      ]
    },
    "2:49644": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u64x4"
      ]
    },
    "2:49727": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i8x32"
      ]
    },
    "2:49806": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i16x16"
      ]
    },
    "2:49853": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i32x8"
      ]
    },
    "2:49884": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i64x4"
      ]
    },
    "2:49919": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "f32x8"
      ]
    },
    "2:50070": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i8x64"
      ]
    },
    "2:50277": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u8x64"
      ]
    },
    "2:50420": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i16x32"
      ]
    },
    "2:50531": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u16x32"
      ]
    },
    "2:50610": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i32x16"
      ]
    },
    "2:50673": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u32x16"
      ]
    },
    "2:50736": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "f32x16"
      ]
    },
    "2:50783": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "i64x8"
      ]
    },
    "2:50822": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "u64x8"
      ]
    },
    "2:50861": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "simd",
        "f64x8"
      ]
    },
    "2:50880": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m128i"
      ]
    },
    "2:50889": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m128"
      ]
    },
    "2:50900": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m128d"
      ]
    },
    "2:50909": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m256i"
      ]
    },
    "2:50920": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m256"
      ]
    },
    "2:50935": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m256d"
      ]
    },
    "2:50946": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m512i"
      ]
    },
    "2:50961": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m512"
      ]
    },
    "2:50984": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m512d"
      ]
    },
    "2:50999": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m128bh"
      ]
    },
    "2:51014": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m256bh"
      ]
    },
    "2:51037": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "__m512bh"
      ]
    },
    "2:51076": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_arch",
        "x86",
        "cpuid",
        "CpuidResult"
      ]
    },
    "2:53520": {
      "crate_id": 2,
      "kind": "enum",
      "path": [
        "core",
        "core_simd",
        "swizzle",
        "Which"
      ]
    },
    "2:53550": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "fmt",
        "{{impl}}",
        "fmt",
        "Wrapper"
      ]
    },
    "2:53563": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "fmt",
        "{{impl}}",
        "fmt",
        "Wrapper"
      ]
    },
    "2:53576": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "fmt",
        "{{impl}}",
        "fmt",
        "Wrapper"
      ]
    },
    "2:53589": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "fmt",
        "{{impl}}",
        "fmt",
        "Wrapper"
      ]
    },
    "2:53602": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "fmt",
        "{{impl}}",
        "fmt",
        "Wrapper"
      ]
    },
    "2:53615": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "fmt",
        "{{impl}}",
        "fmt",
        "Wrapper"
      ]
    },
    "2:53628": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "fmt",
        "{{impl}}",
        "fmt",
        "Wrapper"
      ]
    },
    "2:54854": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "vector",
        "ptr",
        "SimdConstPtr"
      ]
    },
    "2:54875": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "core_simd",
        "vector",
        "ptr",
        "SimdMutPtr"
      ]
    },
    "2:5689": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "flatten",
        "FlatMap"
      ]
    },
    "2:5762": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "flatten",
        "Flatten"
      ]
    },
    "2:5883": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "adapters",
        "flatten",
        "TrustedConstSize"
      ]
    },
    "2:6131": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "intersperse",
        "IntersperseWith"
      ]
    },
    "2:6993": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "adapters",
        "zip",
        "TrustedRandomAccess"
      ]
    },
    "2:6994": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "adapters",
        "zip",
        "TrustedRandomAccessNoCoerce"
      ]
    },
    "2:7093": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "adapters",
        "ResultShunt"
      ]
    },
    "2:7172": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "range",
        "Step"
      ]
    },
    "2:7347": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "iter",
        "sources",
        "empty",
        "Empty"
      ]
    },
    "2:7402": {
      "crate_id": 2,
      "kind": "function",
      "path": [
        "core",
        "iter",
        "sources",
        "once",
        "once"
      ]
    },
    "2:7582": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "accum",
        "Sum"
      ]
    },
    "2:7586": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "accum",
        "Product"
      ]
    },
    "2:7619": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "collect",
        "FromIterator"
      ]
    },
    "2:7623": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "collect",
        "IntoIterator"
      ]
    },
    "2:7629": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Item"
      ]
    },
    "2:7630": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "IntoIter"
      ]
    },
    "2:7632": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "collect",
        "Extend"
      ]
    },
    "2:7667": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "double_ended",
        "DoubleEndedIterator"
      ]
    },
    "2:7668": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "double_ended",
        "DoubleEndedIterator",
        "next_back"
      ]
    },
    "2:7675": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "double_ended",
        "DoubleEndedIterator",
        "rfold"
      ]
    },
    "2:7692": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "exact_size",
        "ExactSizeIterator"
      ]
    },
    "2:7693": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "exact_size",
        "ExactSizeIterator",
        "len"
      ]
    },
    "2:7812": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator"
      ]
    },
    "2:7813": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "Item"
      ]
    },
    "2:7814": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "next"
      ]
    },
    "2:7815": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "size_hint"
      ]
    },
    "2:7821": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "advance_by"
      ]
    },
    "2:7822": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "nth"
      ]
    },
    "2:7826": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "zip"
      ]
    },
    "2:7828": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "intersperse"
      ]
    },
    "2:7829": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "intersperse_with"
      ]
    },
    "2:7831": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "map"
      ]
    },
    "2:7834": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "for_each"
      ]
    },
    "2:7841": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "filter"
      ]
    },
    "2:7846": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "enumerate"
      ]
    },
    "2:7850": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "take_while"
      ]
    },
    "2:7855": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "skip"
      ]
    },
    "2:7861": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "flat_map"
      ]
    },
    "2:7864": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "flatten"
      ]
    },
    "2:7865": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "fuse"
      ]
    },
    "2:7871": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "partition"
      ]
    },
    "2:7881": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "partition_in_place"
      ]
    },
    "2:7896": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "is_partitioned"
      ]
    },
    "2:7898": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "try_fold"
      ]
    },
    "2:7911": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "fold"
      ]
    },
    "2:7914": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "reduce"
      ]
    },
    "2:8058": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "iter",
        "traits",
        "iterator",
        "Iterator",
        "is_sorted"
      ]
    },
    "2:8082": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "marker",
        "FusedIterator"
      ]
    },
    "2:8085": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "marker",
        "TrustedLen"
      ]
    },
    "2:8089": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "iter",
        "traits",
        "marker",
        "TrustedStep"
      ]
    },
    "2:8146": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "lazy",
        "OnceCell"
      ]
    },
    "2:8184": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "lazy",
        "Lazy"
      ]
    },
    "2:8205": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "2:8538": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "panic",
        "unwind_safe",
        "UnwindSafe"
      ]
    },
    "2:8539": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "panic",
        "unwind_safe",
        "RefUnwindSafe"
      ]
    },
    "2:8540": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "panic",
        "unwind_safe",
        "AssertUnwindSafe"
      ]
    },
    "2:8577": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "2:8650": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "panicking",
        "assert_matches_failed",
        "Pattern"
      ]
    },
    "2:8764": {
      "crate_id": 2,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "2:9069": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "stream",
        "stream",
        "Stream"
      ]
    },
    "2:9108": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicBool"
      ]
    },
    "2:9113": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "sync",
        "atomic",
        "AtomicPtr"
      ]
    },
    "2:9259": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "builders",
        "PadAdapter"
      ]
    },
    "2:9264": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "builders",
        "PadAdapterState"
      ]
    },
    "2:9527": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "Write"
      ]
    },
    "2:9537": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "Formatter"
      ]
    },
    "2:9576": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "Debug"
      ]
    },
    "2:9579": {
      "crate_id": 2,
      "kind": "proc_derive",
      "path": [
        "core",
        "fmt",
        "macros",
        "Debug"
      ]
    },
    "2:9583": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "Display"
      ]
    },
    "2:9585": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "Octal"
      ]
    },
    "2:9587": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "Binary"
      ]
    },
    "2:9589": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "LowerHex"
      ]
    },
    "2:9591": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "UpperHex"
      ]
    },
    "2:9593": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "Pointer"
      ]
    },
    "2:9595": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "LowerExp"
      ]
    },
    "2:9597": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "fmt",
        "UpperExp"
      ]
    },
    "2:9706": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "fmt",
        "{{impl}}",
        "fmt",
        "BorrowedPlaceholder"
      ]
    },
    "2:9783": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "hash",
        "Hash"
      ]
    },
    "2:9784": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "hash",
        "Hash",
        "hash"
      ]
    },
    "2:9786": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "hash",
        "Hash",
        "hash_slice"
      ]
    },
    "2:9793": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "hash",
        "Hasher"
      ]
    },
    "2:9795": {
      "crate_id": 2,
      "kind": "foreign_type",
      "path": [
        "core",
        "hash",
        "Hasher",
        "write"
      ]
    },
    "2:9824": {
      "crate_id": 2,
      "kind": "trait",
      "path": [
        "core",
        "hash",
        "BuildHasher"
      ]
    },
    "2:9829": {
      "crate_id": 2,
      "kind": "struct",
      "path": [
        "core",
        "hash",
        "BuildHasherDefault"
      ]
    },
    "3:0": {
      "crate_id": 3,
      "kind": "module",
      "path": [
        "compiler_builtins"
      ]
    },
    "3:313": {
      "crate_id": 3,
      "kind": "enum",
      "path": [
        "compiler_builtins",
        "float",
        "cmp",
        "Result"
      ]
    },
    "4:0": {
      "crate_id": 4,
      "kind": "module",
      "path": [
        "rustc_std_workspace_core"
      ]
    },
    "5:0": {
      "crate_id": 5,
      "kind": "module",
      "path": [
        "alloc"
      ]
    },
    "5:1068": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "append",
        "MergeIter"
      ]
    },
    "5:1088": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "borrow",
        "DormantMutRef"
      ]
    },
    "5:1108": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "dedup_sorted_iter",
        "DedupSortedIter"
      ]
    },
    "5:1286": {
      "crate_id": 5,
      "kind": "enum",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "entry",
        "Entry"
      ]
    },
    "5:1300": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "entry",
        "VacantEntry"
      ]
    },
    "5:1312": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "entry",
        "OccupiedEntry"
      ]
    },
    "5:1323": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "entry",
        "OccupiedError"
      ]
    },
    "5:1390": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "BTreeMap"
      ]
    },
    "5:1414": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "Iter"
      ]
    },
    "5:1424": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "IterMut"
      ]
    },
    "5:1435": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "IntoIter"
      ]
    },
    "5:1448": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "Keys"
      ]
    },
    "5:1457": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "Values"
      ]
    },
    "5:1466": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "ValuesMut"
      ]
    },
    "5:1476": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "IntoKeys"
      ]
    },
    "5:1485": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "IntoValues"
      ]
    },
    "5:1494": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "Range"
      ]
    },
    "5:1503": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "RangeMut"
      ]
    },
    "5:1638": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "{{impl}}",
        "drop",
        "DropGuard"
      ]
    },
    "5:1727": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "map",
        "DrainFilter"
      ]
    },
    "5:1966": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "mem",
        "replace",
        "PanicGuard"
      ]
    },
    "5:1984": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "merge_iter",
        "MergeIterInner"
      ]
    },
    "5:2025": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "navigate",
        "LeafRange"
      ]
    },
    "5:2073": {
      "crate_id": 5,
      "kind": "enum",
      "path": [
        "alloc",
        "collections",
        "btree",
        "navigate",
        "LazyLeafHandle"
      ]
    },
    "5:2093": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "navigate",
        "LazyLeafRange"
      ]
    },
    "5:2309": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "node",
        "NodeRef"
      ]
    },
    "5:2525": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "node",
        "Handle"
      ]
    },
    "5:2793": {
      "crate_id": 5,
      "kind": "enum",
      "path": [
        "alloc",
        "collections",
        "btree",
        "node",
        "marker",
        "Owned"
      ]
    },
    "5:2794": {
      "crate_id": 5,
      "kind": "enum",
      "path": [
        "alloc",
        "collections",
        "btree",
        "node",
        "marker",
        "Dying"
      ]
    },
    "5:2795": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "node",
        "marker",
        "Immut"
      ]
    },
    "5:2799": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "node",
        "marker",
        "Mut"
      ]
    },
    "5:2803": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "node",
        "marker",
        "ValMut"
      ]
    },
    "5:3030": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "Iter"
      ]
    },
    "5:3037": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "Difference"
      ]
    },
    "5:3044": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "SymmetricDifference"
      ]
    },
    "5:3052": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "Intersection"
      ]
    },
    "5:3059": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "Union"
      ]
    },
    "5:313": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "boxed",
        "Box"
      ]
    },
    "5:3140": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "DrainFilter"
      ]
    },
    "5:3364": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "linked_list",
        "LinkedList"
      ]
    },
    "5:3375": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "linked_list",
        "Iter"
      ]
    },
    "5:3388": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "linked_list",
        "IterMut"
      ]
    },
    "5:3455": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "linked_list",
        "{{impl}}",
        "drop",
        "DropGuard"
      ]
    },
    "5:3498": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "linked_list",
        "Cursor"
      ]
    },
    "5:3510": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "linked_list",
        "CursorMut"
      ]
    },
    "5:3567": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "linked_list",
        "DrainFilter"
      ]
    },
    "5:3586": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "linked_list",
        "{{impl}}",
        "drop",
        "DropGuard"
      ]
    },
    "5:3828": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "vec_deque",
        "drain",
        "Drain"
      ]
    },
    "5:3855": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "vec_deque",
        "drain",
        "{{impl}}",
        "drop",
        "DropGuard"
      ]
    },
    "5:3919": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "vec_deque",
        "iter_mut",
        "IterMut"
      ]
    },
    "5:4053": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "vec_deque",
        "iter",
        "Iter"
      ]
    },
    "5:4121": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "vec_deque",
        "pair_slices",
        "PairSlices"
      ]
    },
    "5:4171": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "vec_deque",
        "VecDeque"
      ]
    },
    "5:4186": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "vec_deque",
        "{{impl}}",
        "drop",
        "Dropper"
      ]
    },
    "5:4239": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "vec_deque",
        "{{impl}}",
        "truncate",
        "Dropper"
      ]
    },
    "5:4663": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "rc",
        "Rc"
      ]
    },
    "5:4759": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "rc",
        "{{impl}}",
        "from_iter_exact",
        "Guard"
      ]
    },
    "5:4779": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "5:4878": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "rc",
        "Weak"
      ]
    },
    "5:503": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "5:5123": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "slice",
        "hack",
        "{{impl}}",
        "to_vec",
        "DropGuard"
      ]
    },
    "5:5168": {
      "crate_id": 5,
      "kind": "trait",
      "path": [
        "alloc",
        "slice",
        "Concat"
      ]
    },
    "5:5172": {
      "crate_id": 5,
      "kind": "trait",
      "path": [
        "alloc",
        "slice",
        "Join"
      ]
    },
    "5:5179": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Output"
      ]
    },
    "5:5185": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Output"
      ]
    },
    "5:5191": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Output"
      ]
    },
    "5:5202": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Owned"
      ]
    },
    "5:5208": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "slice",
        "insert_head",
        "InsertionHole"
      ]
    },
    "5:5222": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "slice",
        "merge",
        "MergeHole"
      ]
    },
    "5:5393": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Output"
      ]
    },
    "5:5397": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Output"
      ]
    },
    "5:5413": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Owned"
      ]
    },
    "5:5584": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "string",
        "{{impl}}",
        "retain",
        "SetLenOnDrop"
      ]
    },
    "5:5730": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "5:5738": {
      "crate_id": 5,
      "kind": "trait",
      "path": [
        "alloc",
        "string",
        "ToString"
      ]
    },
    "5:5802": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "string",
        "Drain"
      ]
    },
    "5:5982": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "sync",
        "Arc"
      ]
    },
    "5:6002": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "sync",
        "Weak"
      ]
    },
    "5:6018": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "sync",
        "ArcInner"
      ]
    },
    "5:6094": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "sync",
        "{{impl}}",
        "from_iter_exact",
        "Guard"
      ]
    },
    "5:6117": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "5:6278": {
      "crate_id": 5,
      "kind": "trait",
      "path": [
        "alloc",
        "task",
        "Wake"
      ]
    },
    "5:6435": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "drain_filter",
        "{{impl}}",
        "drop",
        "BackshiftOnDrop"
      ]
    },
    "5:6536": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "drain",
        "Drain"
      ]
    },
    "5:6581": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "drain",
        "{{impl}}",
        "drop",
        "DropGuard"
      ]
    },
    "5:661": {
      "crate_id": 5,
      "kind": "trait",
      "path": [
        "alloc",
        "borrow",
        "ToOwned"
      ]
    },
    "5:667": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Owned"
      ]
    },
    "5:6688": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "into_iter",
        "IntoIter"
      ]
    },
    "5:670": {
      "crate_id": 5,
      "kind": "enum",
      "path": [
        "alloc",
        "borrow",
        "Cow"
      ]
    },
    "5:6758": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "into_iter",
        "{{impl}}",
        "drop",
        "DropGuard"
      ]
    },
    "5:69": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "raw_vec",
        "RawVec"
      ]
    },
    "5:691": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "5:6923": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "set_len_on_drop",
        "SetLenOnDrop"
      ]
    },
    "5:6945": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "in_place_drop",
        "InPlaceDrop"
      ]
    },
    "5:7078": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "Vec"
      ]
    },
    "5:7122": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "{{impl}}",
        "retain_mut",
        "BackshiftOnDrop"
      ]
    },
    "5:7147": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "{{impl}}",
        "dedup_by",
        "FillGapOnDrop"
      ]
    },
    "5:7241": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "5:7404": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "alloc",
        "Global"
      ]
    },
    "5:7413": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "binary_heap",
        "IntoIter"
      ]
    },
    "5:7419": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "binary_heap",
        "IntoIterSorted"
      ]
    },
    "5:7428": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "binary_heap",
        "Drain"
      ]
    },
    "5:7436": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "binary_heap",
        "DrainSorted"
      ]
    },
    "5:7444": {
      "crate_id": 5,
      "kind": "enum",
      "path": [
        "alloc",
        "collections",
        "btree",
        "merge_iter",
        "Peeked"
      ]
    },
    "5:7458": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "BTreeSet"
      ]
    },
    "5:7482": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "IntoIter"
      ]
    },
    "5:7488": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "Range"
      ]
    },
    "5:7496": {
      "crate_id": 5,
      "kind": "enum",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "DifferenceInner"
      ]
    },
    "5:7512": {
      "crate_id": 5,
      "kind": "enum",
      "path": [
        "alloc",
        "collections",
        "btree",
        "set",
        "IntersectionInner"
      ]
    },
    "5:7528": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "linked_list",
        "IntoIter"
      ]
    },
    "5:7534": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "vec_deque",
        "into_iter",
        "IntoIter"
      ]
    },
    "5:7581": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "TryReserveError"
      ]
    },
    "5:7594": {
      "crate_id": 5,
      "kind": "enum",
      "path": [
        "alloc",
        "collections",
        "TryReserveErrorKind"
      ]
    },
    "5:7615": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "slice",
        "merge_sort",
        "Run"
      ]
    },
    "5:7621": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "string",
        "String"
      ]
    },
    "5:7632": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "string",
        "FromUtf8Error"
      ]
    },
    "5:7644": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "string",
        "FromUtf16Error"
      ]
    },
    "5:7699": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "drain_filter",
        "DrainFilter"
      ]
    },
    "5:7716": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "vec",
        "splice",
        "Splice"
      ]
    },
    "5:798": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "binary_heap",
        "BinaryHeap"
      ]
    },
    "5:801": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "binary_heap",
        "PeekMut"
      ]
    },
    "5:814": {
      "crate_id": 5,
      "kind": "typedef",
      "path": [
        "removal_cargo_feature_dep_new",
        "Target"
      ]
    },
    "5:872": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "binary_heap",
        "Hole"
      ]
    },
    "5:889": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "binary_heap",
        "Iter"
      ]
    },
    "5:969": {
      "crate_id": 5,
      "kind": "struct",
      "path": [
        "alloc",
        "collections",
        "binary_heap",
        "{{impl}}",
        "drop",
        "DropGuard"
      ]
    },
    "6:0": {
      "crate_id": 6,
      "kind": "module",
      "path": [
        "libc"
      ]
    },
    "6:1515": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "in_addr"
      ]
    },
    "6:1520": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "ip_mreq"
      ]
    },
    "6:1526": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "ip_mreq_source"
      ]
    },
    "6:1533": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "sockaddr"
      ]
    },
    "6:1540": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "sockaddr_in"
      ]
    },
    "6:1549": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "sockaddr_in6"
      ]
    },
    "6:1558": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "addrinfo"
      ]
    },
    "6:1570": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "sockaddr_ll"
      ]
    },
    "6:1582": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "fd_set"
      ]
    },
    "6:1588": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "tm"
      ]
    },
    "6:159": {
      "crate_id": 6,
      "kind": "enum",
      "path": [
        "libc",
        "unix",
        "FILE"
      ]
    },
    "6:1603": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "sched_param"
      ]
    },
    "6:1608": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "Dl_info"
      ]
    },
    "6:1616": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "lconv"
      ]
    },
    "6:163": {
      "crate_id": 6,
      "kind": "enum",
      "path": [
        "libc",
        "unix",
        "fpos_t"
      ]
    },
    "6:1644": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "in_pktinfo"
      ]
    },
    "6:1651": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "ifaddrs"
      ]
    },
    "6:1662": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "in6_rtmsg"
      ]
    },
    "6:1676": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "arpreq"
      ]
    },
    "6:1686": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "arpreq_old"
      ]
    },
    "6:1694": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "arphdr"
      ]
    },
    "6:1703": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "mmsghdr"
      ]
    },
    "6:1709": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "epoll_event"
      ]
    },
    "6:1715": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "sockaddr_un"
      ]
    },
    "6:1722": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "sockaddr_storage"
      ]
    },
    "6:1730": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "utsname"
      ]
    },
    "6:1746": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "sigevent"
      ]
    },
    "6:1840": {
      "crate_id": 6,
      "kind": "enum",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "fpos64_t"
      ]
    },
    "6:3668": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "rlimit64"
      ]
    },
    "6:3674": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "glob_t"
      ]
    },
    "6:3687": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "passwd"
      ]
    },
    "6:3698": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "spwd"
      ]
    },
    "6:3711": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "dqblk"
      ]
    },
    "6:3724": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "signalfd_siginfo"
      ]
    },
    "6:3751": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "itimerspec"
      ]
    },
    "6:3757": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "fsid_t"
      ]
    },
    "6:3763": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "packet_mreq"
      ]
    },
    "6:3772": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "cpu_set_t"
      ]
    },
    "6:3778": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "if_nameindex"
      ]
    },
    "6:3784": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "msginfo"
      ]
    },
    "6:3796": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "sembuf"
      ]
    },
    "6:3803": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "input_event"
      ]
    },
    "6:3811": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "input_id"
      ]
    },
    "6:3819": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "input_absinfo"
      ]
    },
    "6:3829": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "input_keymap_entry"
      ]
    },
    "6:3839": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "input_mask"
      ]
    },
    "6:3846": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ff_replay"
      ]
    },
    "6:3852": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ff_trigger"
      ]
    },
    "6:3858": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ff_envelope"
      ]
    },
    "6:3866": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ff_constant_effect"
      ]
    },
    "6:3872": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ff_ramp_effect"
      ]
    },
    "6:3879": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ff_condition_effect"
      ]
    },
    "6:3889": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ff_periodic_effect"
      ]
    },
    "6:3901": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ff_rumble_effect"
      ]
    },
    "6:3907": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ff_effect"
      ]
    },
    "6:3918": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "uinput_ff_upload"
      ]
    },
    "6:3926": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "uinput_ff_erase"
      ]
    },
    "6:3933": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "uinput_abs_setup"
      ]
    },
    "6:3939": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "dl_phdr_info"
      ]
    },
    "6:3951": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "Elf32_Ehdr"
      ]
    },
    "6:3970": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "Elf64_Ehdr"
      ]
    },
    "6:3989": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "Elf32_Sym"
      ]
    },
    "6:3999": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "Elf64_Sym"
      ]
    },
    "6:4009": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "Elf32_Phdr"
      ]
    },
    "6:4021": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "Elf64_Phdr"
      ]
    },
    "6:4033": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "Elf32_Shdr"
      ]
    },
    "6:4047": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "Elf64_Shdr"
      ]
    },
    "6:4061": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "ucred"
      ]
    },
    "6:4068": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "mntent"
      ]
    },
    "6:4078": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "posix_spawn_file_actions_t"
      ]
    },
    "6:4087": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "posix_spawnattr_t"
      ]
    },
    "6:4099": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "genlmsghdr"
      ]
    },
    "6:4106": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "in6_pktinfo"
      ]
    },
    "6:4112": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "arpd_request"
      ]
    },
    "6:4123": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "inotify_event"
      ]
    },
    "6:4131": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "fanotify_response"
      ]
    },
    "6:4137": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "sockaddr_vm"
      ]
    },
    "6:4147": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "regmatch_t"
      ]
    },
    "6:4153": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "sock_extended_err"
      ]
    },
    "6:4164": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "__c_anonymous_sockaddr_can_tp"
      ]
    },
    "6:4170": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "__c_anonymous_sockaddr_can_j1939"
      ]
    },
    "6:4177": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "can_filter"
      ]
    },
    "6:4183": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "sock_filter"
      ]
    },
    "6:4191": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "sock_fprog"
      ]
    },
    "6:4197": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "seccomp_data"
      ]
    },
    "6:4206": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "nlmsghdr"
      ]
    },
    "6:4215": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "nlmsgerr"
      ]
    },
    "6:4221": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "nlattr"
      ]
    },
    "6:4227": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "sockaddr_nl"
      ]
    },
    "6:4235": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "dirent"
      ]
    },
    "6:4245": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "dirent64"
      ]
    },
    "6:4255": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "sockaddr_alg"
      ]
    },
    "6:4266": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "uinput_setup"
      ]
    },
    "6:4274": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "uinput_user_dev"
      ]
    },
    "6:4290": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "af_alg_iv"
      ]
    },
    "6:4297": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "mq_attr"
      ]
    },
    "6:4307": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "sock_txtime"
      ]
    },
    "6:4313": {
      "crate_id": 6,
      "kind": "union",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "__c_anonymous_sockaddr_can_can_addr"
      ]
    },
    "6:4319": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "sockaddr_can"
      ]
    },
    "6:4933": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "statx"
      ]
    },
    "6:4962": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "statx_timestamp"
      ]
    },
    "6:4970": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "aiocb"
      ]
    },
    "6:4988": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "__exit_status"
      ]
    },
    "6:4994": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "__timeval"
      ]
    },
    "6:5000": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "glob64_t"
      ]
    },
    "6:5013": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "msghdr"
      ]
    },
    "6:5024": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "cmsghdr"
      ]
    },
    "6:5031": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "termios"
      ]
    },
    "6:5044": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "mallinfo"
      ]
    },
    "6:5058": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "mallinfo2"
      ]
    },
    "6:5072": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "nl_pktinfo"
      ]
    },
    "6:5077": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "nl_mmap_req"
      ]
    },
    "6:5085": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "nl_mmap_hdr"
      ]
    },
    "6:509": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "group"
      ]
    },
    "6:5095": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "rtentry"
      ]
    },
    "6:5115": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "timex"
      ]
    },
    "6:5150": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "ntptimeval"
      ]
    },
    "6:5162": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "regex_t"
      ]
    },
    "6:517": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "utimbuf"
      ]
    },
    "6:5174": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "Elf64_Chdr"
      ]
    },
    "6:5182": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "Elf32_Chdr"
      ]
    },
    "6:5189": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "seminfo"
      ]
    },
    "6:5200": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "sifields_sigchld"
      ]
    },
    "6:5226": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "utmpx"
      ]
    },
    "6:523": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "timeval"
      ]
    },
    "6:529": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "timespec"
      ]
    },
    "6:5331": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "sigset_t"
      ]
    },
    "6:5337": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "sysinfo"
      ]
    },
    "6:535": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "rlimit"
      ]
    },
    "6:5357": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "msqid_ds"
      ]
    },
    "6:5372": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "semid_ds"
      ]
    },
    "6:541": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "rusage"
      ]
    },
    "6:561": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "ipv6_mreq"
      ]
    },
    "6:567": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "hostent"
      ]
    },
    "6:576": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "iovec"
      ]
    },
    "6:5788": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "sigaction"
      ]
    },
    "6:5796": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "statfs"
      ]
    },
    "6:5812": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "flock"
      ]
    },
    "6:582": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "pollfd"
      ]
    },
    "6:5821": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "flock64"
      ]
    },
    "6:5830": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "siginfo_t"
      ]
    },
    "6:5841": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "stack_t"
      ]
    },
    "6:5848": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "stat"
      ]
    },
    "6:5871": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "stat64"
      ]
    },
    "6:589": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "winsize"
      ]
    },
    "6:5894": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "statfs64"
      ]
    },
    "6:5911": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "statvfs64"
      ]
    },
    "6:5928": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "pthread_attr_t"
      ]
    },
    "6:5934": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "_libc_fpxreg"
      ]
    },
    "6:5943": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "_libc_xmmreg"
      ]
    },
    "6:5949": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "_libc_fpstate"
      ]
    },
    "6:5967": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "user_regs_struct"
      ]
    },
    "6:597": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linger"
      ]
    },
    "6:5998": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "user"
      ]
    },
    "6:6019": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "mcontext_t"
      ]
    },
    "6:6028": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "ipc_perm"
      ]
    },
    "6:603": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "sigval"
      ]
    },
    "6:6043": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "shmid_ds"
      ]
    },
    "6:6057": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "ip_mreqn"
      ]
    },
    "6:6064": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "user_fpregs_struct"
      ]
    },
    "6:608": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "itimerval"
      ]
    },
    "6:6082": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "ucontext_t"
      ]
    },
    "6:614": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "tms"
      ]
    },
    "6:622": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "servent"
      ]
    },
    "6:630": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "protoent"
      ]
    },
    "6:6456": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "not_x32",
        "statvfs"
      ]
    },
    "6:6478": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "b64",
        "x86_64",
        "align",
        "max_align_t"
      ]
    },
    "6:6486": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "gnu",
        "align",
        "sem_t"
      ]
    },
    "6:6583": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "arch",
        "generic",
        "termios2"
      ]
    },
    "6:6604": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "pthread_mutexattr_t"
      ]
    },
    "6:6610": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "pthread_rwlockattr_t"
      ]
    },
    "6:6616": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "pthread_condattr_t"
      ]
    },
    "6:6622": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "fanotify_event_metadata"
      ]
    },
    "6:6633": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "pthread_cond_t"
      ]
    },
    "6:6639": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "pthread_mutex_t"
      ]
    },
    "6:6645": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "pthread_rwlock_t"
      ]
    },
    "6:665": {
      "crate_id": 6,
      "kind": "enum",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "timezone"
      ]
    },
    "6:6651": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "can_frame"
      ]
    },
    "6:6662": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "canfd_frame"
      ]
    },
    "6:6675": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "linux_like",
        "linux",
        "non_exhaustive",
        "open_how"
      ]
    },
    "6:6687": {
      "crate_id": 6,
      "kind": "struct",
      "path": [
        "libc",
        "unix",
        "align",
        "in6_addr"
      ]
    },
    "6:90": {
      "crate_id": 6,
      "kind": "enum",
      "path": [
        "libc",
        "unix",
        "DIR"
      ]
    },
    "7:0": {
      "crate_id": 7,
      "kind": "module",
      "path": [
        "unwind"
      ]
    },
    "7:38": {
      "crate_id": 7,
      "kind": "enum",
      "path": [
        "unwind",
        "libunwind",
        "_Unwind_Reason_Code"
      ]
    },
    "7:85": {
      "crate_id": 7,
      "kind": "enum",
      "path": [
        "unwind",
        "libunwind",
        "_Unwind_Action"
      ]
    },
    "8:0": {
      "crate_id": 8,
      "kind": "module",
      "path": [
        "cfg_if"
      ]
    },
    "9:0": {
      "crate_id": 9,
      "kind": "module",
      "path": [
        "hashbrown"
      ]
    },
    "9:1008": {
      "crate_id": 9,
      "kind": "enum",
      "path": [
        "hashbrown",
        "map",
        "Entry"
      ]
    },
    "9:1026": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "OccupiedEntry"
      ]
    },
    "9:1052": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "VacantEntry"
      ]
    },
    "9:1067": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "OccupiedError"
      ]
    },
    "9:111": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "bitmask",
        "BitMaskIter"
      ]
    },
    "9:1405": {
      "crate_id": 9,
      "kind": "enum",
      "path": [
        "hashbrown",
        "rustc_entry",
        "RustcEntry"
      ]
    },
    "9:1421": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "rustc_entry",
        "RustcOccupiedEntry"
      ]
    },
    "9:1442": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "rustc_entry",
        "RustcVacantEntry"
      ]
    },
    "9:1516": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "scopeguard",
        "ScopeGuard"
      ]
    },
    "9:159": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "Bucket"
      ]
    },
    "9:1609": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "set",
        "HashSet"
      ]
    },
    "9:1756": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "set",
        "Iter"
      ]
    },
    "9:1760": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "set",
        "IntoIter"
      ]
    },
    "9:1764": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "set",
        "Drain"
      ]
    },
    "9:1769": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "set",
        "DrainFilter"
      ]
    },
    "9:1776": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "set",
        "Intersection"
      ]
    },
    "9:1783": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "set",
        "Difference"
      ]
    },
    "9:1790": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "set",
        "SymmetricDifference"
      ]
    },
    "9:1796": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "set",
        "Union"
      ]
    },
    "9:181": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "RawTable"
      ]
    },
    "9:2054": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "sse2",
        "Group"
      ]
    },
    "9:2060": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "bitmask",
        "BitMask"
      ]
    },
    "9:2066": {
      "crate_id": 9,
      "kind": "enum",
      "path": [
        "hashbrown",
        "raw",
        "Fallibility"
      ]
    },
    "9:2074": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "TableLayout"
      ]
    },
    "9:2082": {
      "crate_id": 9,
      "kind": "enum",
      "path": [
        "hashbrown",
        "TryReserveError"
      ]
    },
    "9:2098": {
      "crate_id": 9,
      "kind": "enum",
      "path": [
        "hashbrown",
        "UnavailableMutError"
      ]
    },
    "9:338": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "RawIterRange"
      ]
    },
    "9:361": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "RawIter"
      ]
    },
    "9:380": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "RawIntoIter"
      ]
    },
    "9:413": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "RawDrain"
      ]
    },
    "9:447": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "RawIterHash"
      ]
    },
    "9:453": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "raw",
        "RawIterHashInner"
      ]
    },
    "9:548": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "HashMap"
      ]
    },
    "9:711": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "Iter"
      ]
    },
    "9:725": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "IterMut"
      ]
    },
    "9:738": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "IntoIter"
      ]
    },
    "9:748": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "Keys"
      ]
    },
    "9:761": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "Values"
      ]
    },
    "9:774": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "Drain"
      ]
    },
    "9:785": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "DrainFilter"
      ]
    },
    "9:800": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "ConsumeAllOnDrop"
      ]
    },
    "9:833": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "ValuesMut"
      ]
    },
    "9:838": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "RawEntryBuilderMut"
      ]
    },
    "9:845": {
      "crate_id": 9,
      "kind": "enum",
      "path": [
        "hashbrown",
        "map",
        "RawEntryMut"
      ]
    },
    "9:857": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "RawOccupiedEntryMut"
      ]
    },
    "9:876": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "RawVacantEntryMut"
      ]
    },
    "9:884": {
      "crate_id": 9,
      "kind": "struct",
      "path": [
        "hashbrown",
        "map",
        "RawEntryBuilder"
      ]
    }
  },
  "root": "0:0"
}